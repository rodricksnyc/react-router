function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as fs from 'fs';
import * as ini from 'ini';
import { ApiConfigMap, ApiSettings, DefaultSettings, ValueSettings, sdkError, unquote } from '@looker/sdk-rtl';
export var getenv = function getenv(name) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var val = process.env[name];
  return val === undefined ? defaultValue : val;
};
export var ApiConfig = contents => ini.parse(contents);
export var ApiConfigSection = (contents, section) => {
  var config = ApiConfig(contents);

  if (!section) {
    section = Object.keys(config)[0];
  }

  var settings = config[section];

  if (!settings) {
    throw new Error("No section named \"".concat(section, "\" was found"));
  }

  if (settings.api_version) {
    console.warn('api_version is no longer read from a configuration file by the SDK');
  }

  return settings;
};
export var readEnvConfig = envPrefix => {
  var values = {};
  var configMap = ApiConfigMap(envPrefix);
  Object.keys(configMap).forEach(key => {
    var envKey = configMap[key];

    if (process.env[envKey] !== undefined) {
      var val = unquote(process.env[envKey]);
      values[key] = val;
    }
  });
  return values;
};
export var readIniConfig = (fileName, envPrefix, section) => {
  var config = readEnvConfig(envPrefix);

  if (fileName && fs.existsSync(fileName)) {
    config = _objectSpread(_objectSpread({}, ApiConfigSection(fs.readFileSync(fileName, 'utf8'), section)), config);
  }

  Object.keys(config).forEach(key => {
    var val = config[key];

    if (typeof val === 'string') {
      config[key] = unquote(val);
    }
  });
  return config;
};
export class NodeSettings extends ApiSettings {
  constructor(envPrefix, contents, section) {
    var settings;

    if (contents) {
      if (typeof contents === 'string') {
        settings = ApiConfigSection(contents, section);
      } else {
        settings = contents;
      }

      settings = _objectSpread(_objectSpread({}, readEnvConfig(envPrefix)), settings);
    } else {
      settings = readEnvConfig(envPrefix);
    }

    super(_objectSpread(_objectSpread({}, DefaultSettings()), settings));

    _defineProperty(this, "envPrefix", void 0);

    _defineProperty(this, "section", void 0);

    this.section = section !== null && section !== void 0 ? section : '';
    this.envPrefix = envPrefix;
  }

  readConfig(_section) {
    return readEnvConfig(this.envPrefix);
  }

}
export class NodeSettingsIniFile extends NodeSettings {
  constructor(envPrefix) {
    var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var section = arguments.length > 2 ? arguments[2] : undefined;

    if (fileName && !fs.existsSync(fileName)) {
      throw sdkError({
        message: "File ".concat(fileName, " was not found")
      });
    }

    fileName = fileName || './looker.ini';
    var config = readIniConfig(fileName, envPrefix, section);
    var settings = ValueSettings(config, envPrefix);
    super(envPrefix, settings, section);

    _defineProperty(this, "fileName", void 0);

    this.fileName = fileName;
  }

  readConfig(section) {
    section = section || this.section;
    return readIniConfig(this.fileName, this.envPrefix, section);
  }

}
//# sourceMappingURL=nodeSettings.js.map