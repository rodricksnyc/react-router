{"version":3,"file":"use_expression_state.js","names":["useExpressionState","propsExpression","expression","filter","onChange","useContext","FilterContext","updateExpression","isControlled","useControlWarn","controllingProps","isControlledCheck","undefined","name","useState","default_value","uncontrolledExpression","setExpression","handleChange","value","useEffect"],"sources":["../../../src/DashboardFilter/use_expression_state.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useContext, useEffect, useState } from 'react'\nimport { useControlWarn } from '@looker/components'\nimport type { IDashboardFilter } from '@looker/sdk'\nimport type { FilterChangeProps } from '../Filter/types/filter_props'\nimport { FilterContext } from '../FilterCollection'\n\nexport interface UseExpressionStateProps {\n  /**\n   * The current value of the filter.\n   * See {@link https://cloud.google.com/looker/docs/reference/filter-expressions Looker Filter Expressions}.\n   */\n  expression?: string\n  /**\n   * A dashboard filter as defined in @looker/sdk\n   */\n  filter: IDashboardFilter\n  /**\n   * Called when the filter expression is changed\n   */\n  onChange: (expression: string) => void\n}\n\n/**\n * Custom state hook for filter expression\n */\nexport const useExpressionState = ({\n  expression: propsExpression,\n  filter,\n  onChange,\n}: UseExpressionStateProps) => {\n  const { updateExpression } = useContext(FilterContext)\n\n  const isControlled = useControlWarn({\n    controllingProps: ['expression'],\n    isControlledCheck: () => propsExpression !== undefined,\n    name: 'DashboardFilter',\n  })\n  const [uncontrolledExpression, setExpression] = useState(\n    propsExpression || filter.default_value || ''\n  )\n\n  const handleChange = (value: FilterChangeProps) => {\n    setExpression(value.expression)\n    onChange(value.expression)\n  }\n\n  const expression = isControlled\n    ? propsExpression || ''\n    : uncontrolledExpression\n\n  useEffect(() => {\n    updateExpression(filter, expression)\n  }, [filter, expression, updateExpression])\n\n  return {\n    expression,\n    onChange: handleChange,\n  }\n}\n"],"mappings":";;;;;;;;AAIA;AACA;AAGA;;AAqBO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,OAIA;EAAA,IAHjBC,eAAe,QAA3BC,UAAU;IACVC,MAAM,QAANA,MAAM;IACNC,QAAQ,QAARA,QAAQ;EAER,kBAA6B,IAAAC,iBAAU,EAACC,+BAAa,CAAC;IAA9CC,gBAAgB,eAAhBA,gBAAgB;EAExB,IAAMC,YAAY,GAAG,IAAAC,0BAAc,EAAC;IAClCC,gBAAgB,EAAE,CAAC,YAAY,CAAC;IAChCC,iBAAiB,EAAE;MAAA,OAAMV,eAAe,KAAKW,SAAS;IAAA;IACtDC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,gBAAgD,IAAAC,eAAQ,EACtDb,eAAe,IAAIE,MAAM,CAACY,aAAa,IAAI,EAAE,CAC9C;IAAA;IAFMC,sBAAsB;IAAEC,aAAa;EAI5C,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAwB,EAAK;IACjDF,aAAa,CAACE,KAAK,CAACjB,UAAU,CAAC;IAC/BE,QAAQ,CAACe,KAAK,CAACjB,UAAU,CAAC;EAC5B,CAAC;EAED,IAAMA,UAAU,GAAGM,YAAY,GAC3BP,eAAe,IAAI,EAAE,GACrBe,sBAAsB;EAE1B,IAAAI,gBAAS,EAAC,YAAM;IACdb,gBAAgB,CAACJ,MAAM,EAAED,UAAU,CAAC;EACtC,CAAC,EAAE,CAACC,MAAM,EAAED,UAAU,EAAEK,gBAAgB,CAAC,CAAC;EAE1C,OAAO;IACLL,UAAU,EAAVA,UAAU;IACVE,QAAQ,EAAEc;EACZ,CAAC;AACH,CAAC;AAAA"}