{"version":3,"file":"ControlFilter.js","names":["ControlFilter","ast","expressionType","validationMessage","dispatchConfigTypeChange","adapterProps","config","field","getControlFilterInfo","getFilterTokenItem","type","Component","filterTokenProps","props","useEffect","date","onChange","value","filterTokenInputChange","onInputChange","restProps","toggleOptions","calculateSuggestOptions","display","category"],"sources":["../../../../../src/Filter/components/ControlFilter/ControlFilter.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useEffect } from 'react'\nimport type { InternalFilterProps } from '../../types/filter_props'\nimport { getControlFilterInfo, calculateSuggestOptions } from '../../utils'\nimport { getFilterTokenItem } from '../../utils/get_filter_token_item'\n\n/**\n * Visual filters that can take the form of radio buttons, checkboxes, etc.\n */\nexport const ControlFilter = ({\n  ast,\n  expressionType,\n  validationMessage,\n  dispatchConfigTypeChange = false,\n  ...adapterProps\n}: InternalFilterProps) => {\n  const { config, field } = adapterProps\n  const { Component, props: filterTokenProps } = getControlFilterInfo(\n    getFilterTokenItem(ast || {}, expressionType, config.type),\n    adapterProps\n  )\n\n  /**\n   * This effect is used by FilterEditorSettings in Edit Mode\n   * because we currently delegate initializing filter value to the Filter components\n   * TODO: refactor initializing filters with proper values then remove this effect\n   */\n  useEffect(() => {\n    // When control type changes in Edit Mode, update value and default value of filter\n    if (dispatchConfigTypeChange) {\n      if (filterTokenProps?.date) {\n        filterTokenProps?.onChange(filterTokenProps?.date)\n      } else {\n        filterTokenProps?.onChange(filterTokenProps?.value)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.type])\n\n  if (!filterTokenProps || !Component) {\n    // props or Component not available - nothing to render\n    return null\n  }\n\n  const { onInputChange: filterTokenInputChange, ...restProps } =\n    filterTokenProps\n\n  const toggleOptions = calculateSuggestOptions(filterTokenProps)\n\n  return (\n    <Component\n      onInputChange={filterTokenInputChange}\n      inline={config.display === 'inline'}\n      validationMessage={validationMessage}\n      anyOption={!(field?.category === 'parameter')}\n      {...restProps}\n      options={toggleOptions}\n    />\n  )\n}\n"],"mappings":";;;;;;;;;;AAIA;AAEA;AACA;AAAsE;EAAA;AAAA;AAAA;AAK/D,IAAMA,aAAa,GAAG,SAAhBA,aAAa,OAMC;EAAA,IALzBC,GAAG,QAAHA,GAAG;IACHC,cAAc,QAAdA,cAAc;IACdC,iBAAiB,QAAjBA,iBAAiB;IAAA,6BACjBC,wBAAwB;IAAxBA,wBAAwB,sCAAG,KAAK;IAC7BC,YAAY;EAEf,IAAQC,MAAM,GAAYD,YAAY,CAA9BC,MAAM;IAAEC,KAAK,GAAKF,YAAY,CAAtBE,KAAK;EACrB,4BAA+C,IAAAC,2BAAoB,EACjE,IAAAC,yCAAkB,EAACR,GAAG,IAAI,CAAC,CAAC,EAAEC,cAAc,EAAEI,MAAM,CAACI,IAAI,CAAC,EAC1DL,YAAY,CACb;IAHOM,SAAS,yBAATA,SAAS;IAASC,gBAAgB,yBAAvBC,KAAK;;EAUxB,IAAAC,gBAAS,EAAC,YAAM;IAEd,IAAIV,wBAAwB,EAAE;MAC5B,IAAIQ,gBAAgB,aAAhBA,gBAAgB,eAAhBA,gBAAgB,CAAEG,IAAI,EAAE;QAC1BH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEI,QAAQ,CAACJ,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEG,IAAI,CAAC;MACpD,CAAC,MAAM;QACLH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEI,QAAQ,CAACJ,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEK,KAAK,CAAC;MACrD;IACF;EAEF,CAAC,EAAE,CAACX,MAAM,CAACI,IAAI,CAAC,CAAC;EAEjB,IAAI,CAACE,gBAAgB,IAAI,CAACD,SAAS,EAAE;IAEnC,OAAO,IAAI;EACb;EAEA,IAAuBO,sBAAsB,GAC3CN,gBAAgB,CADVO,aAAa;IAA6BC,SAAS,6CACzDR,gBAAgB;EAElB,IAAMS,aAAa,GAAG,IAAAC,8BAAuB,EAACV,gBAAgB,CAAC;EAE/D,OACE,gCAAC,SAAS;IACR,aAAa,EAAEM,sBAAuB;IACtC,MAAM,EAAEZ,MAAM,CAACiB,OAAO,KAAK,QAAS;IACpC,iBAAiB,EAAEpB,iBAAkB;IACrC,SAAS,EAAE,EAAE,CAAAI,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiB,QAAQ,MAAK,WAAW;EAAE,GAC1CJ,SAAS;IACb,OAAO,EAAEC;EAAc,GACvB;AAEN,CAAC;AAAA"}