{"version":3,"file":"ButtonToggles.spec.js","names":["options","label","value","describe","it","renderWithTheme","jest","fn","expect","screen","getByText","toHaveAttribute","mock","fireEvent","click","toHaveBeenCalledWith","getByRole","toBeInTheDocument"],"sources":["../../../../../../../src/Filter/components/ControlFilter/components/ButtonToggles/ButtonToggles.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport { fireEvent, screen } from '@testing-library/react'\nimport React from 'react'\nimport { ButtonToggles } from './ButtonToggles'\n\nconst options = [\n  {\n    label: 'label1',\n    value: 'value1',\n  },\n  {\n    label: 'label2',\n    value: 'value2',\n  },\n  {\n    label: 'label3',\n    value: 'value3',\n  },\n]\n\ndescribe('ButtonToggles tests', () => {\n  it('ButtonToggles with values pre-selected are selected', () => {\n    renderWithTheme(\n      <ButtonToggles value={'value1'} options={options} onChange={jest.fn()} />\n    )\n\n    expect(screen.getByText('label1')).toHaveAttribute('aria-pressed', 'true')\n    expect(screen.getByText('label2')).toHaveAttribute('aria-pressed', 'false')\n    expect(screen.getByText('label3')).toHaveAttribute('aria-pressed', 'false')\n  })\n\n  it('passes onChange newly selected value', () => {\n    const mock = jest.fn()\n    renderWithTheme(\n      <ButtonToggles value={''} options={options} onChange={mock} />\n    )\n\n    fireEvent.click(screen.getByText('label1'))\n    expect(mock).toHaveBeenCalledWith('value1')\n  })\n\n  it('passes onChange new value when other value is clicked', () => {\n    const mock = jest.fn()\n    renderWithTheme(\n      <ButtonToggles value={'value1'} options={options} onChange={mock} />\n    )\n\n    fireEvent.click(screen.getByText('label2'))\n    expect(mock).toHaveBeenCalledWith('value2')\n  })\n\n  it('handles loading state', () => {\n    renderWithTheme(\n      <ButtonToggles\n        isLoading\n        value={'value1'}\n        options={options}\n        onChange={jest.fn()}\n      />\n    )\n    expect(screen.getByRole('progressbar')).toBeInTheDocument()\n  })\n})\n"],"mappings":";;;AAIA;AACA;AACA;AACA;;AAEA,IAAMA,OAAO,GAAG,CACd;EACEC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE;AACT,CAAC,EACD;EACED,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE;AACT,CAAC,EACD;EACED,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE;AACT,CAAC,CACF;AAEDC,QAAQ,CAAC,qBAAqB,EAAE,YAAM;EACpCC,EAAE,CAAC,qDAAqD,EAAE,YAAM;IAC9D,IAAAC,oCAAe,EACb,iCAAC,4BAAa;MAAC,KAAK,EAAE,QAAS;MAAC,OAAO,EAAEL,OAAQ;MAAC,QAAQ,EAAEM,IAAI,CAACC,EAAE;IAAG,EAAG,CAC1E;IAEDC,MAAM,CAACC,aAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACC,eAAe,CAAC,cAAc,EAAE,MAAM,CAAC;IAC1EH,MAAM,CAACC,aAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACC,eAAe,CAAC,cAAc,EAAE,OAAO,CAAC;IAC3EH,MAAM,CAACC,aAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACC,eAAe,CAAC,cAAc,EAAE,OAAO,CAAC;EAC7E,CAAC,CAAC;EAEFP,EAAE,CAAC,sCAAsC,EAAE,YAAM;IAC/C,IAAMQ,IAAI,GAAGN,IAAI,CAACC,EAAE,EAAE;IACtB,IAAAF,oCAAe,EACb,iCAAC,4BAAa;MAAC,KAAK,EAAE,EAAG;MAAC,OAAO,EAAEL,OAAQ;MAAC,QAAQ,EAAEY;IAAK,EAAG,CAC/D;IAEDC,gBAAS,CAACC,KAAK,CAACL,aAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC3CF,MAAM,CAACI,IAAI,CAAC,CAACG,oBAAoB,CAAC,QAAQ,CAAC;EAC7C,CAAC,CAAC;EAEFX,EAAE,CAAC,uDAAuD,EAAE,YAAM;IAChE,IAAMQ,IAAI,GAAGN,IAAI,CAACC,EAAE,EAAE;IACtB,IAAAF,oCAAe,EACb,iCAAC,4BAAa;MAAC,KAAK,EAAE,QAAS;MAAC,OAAO,EAAEL,OAAQ;MAAC,QAAQ,EAAEY;IAAK,EAAG,CACrE;IAEDC,gBAAS,CAACC,KAAK,CAACL,aAAM,CAACC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC3CF,MAAM,CAACI,IAAI,CAAC,CAACG,oBAAoB,CAAC,QAAQ,CAAC;EAC7C,CAAC,CAAC;EAEFX,EAAE,CAAC,uBAAuB,EAAE,YAAM;IAChC,IAAAC,oCAAe,EACb,iCAAC,4BAAa;MACZ,SAAS;MACT,KAAK,EAAE,QAAS;MAChB,OAAO,EAAEL,OAAQ;MACjB,QAAQ,EAAEM,IAAI,CAACC,EAAE;IAAG,EACpB,CACH;IACDC,MAAM,CAACC,aAAM,CAACO,SAAS,CAAC,aAAa,CAAC,CAAC,CAACC,iBAAiB,EAAE;EAC7D,CAAC,CAAC;AACJ,CAAC,CAAC"}