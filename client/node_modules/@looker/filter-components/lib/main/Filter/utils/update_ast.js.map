{"version":3,"file":"update_ast.js","names":["updateASTFromProps","type","expression","userAttributes","typeToGrammar","subTypes","ast","parseFilterExpression","hasMatchesAdvancedNode","getMatchesAdvancedNode","message","undefined"],"sources":["../../../../src/Filter/utils/update_ast.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type {\n  UserAttributeWithValue,\n  FilterExpressionType,\n} from '@looker/filter-expressions'\nimport {\n  typeToGrammar,\n  parseFilterExpression,\n  getMatchesAdvancedNode,\n  hasMatchesAdvancedNode,\n} from '@looker/filter-expressions'\n\n/**\n * Creates and returns an AST given the filter's type, expression, and any optional userAttributes.\n */\nexport const updateASTFromProps = (\n  type: FilterExpressionType,\n  expression: string,\n  userAttributes?: UserAttributeWithValue[]\n) => {\n  const { subTypes } = typeToGrammar(type)\n\n  let ast\n  try {\n    ast = parseFilterExpression(type, expression, userAttributes)\n    if (hasMatchesAdvancedNode(subTypes)(ast)) {\n      ast = getMatchesAdvancedNode(expression, ast)\n    }\n  } catch ({ message }) {\n    ast = undefined\n  }\n  return ast\n}\n"],"mappings":";;;;;;AAQA;;AAUO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,CAC7BC,IAA0B,EAC1BC,UAAkB,EAClBC,cAAyC,EACtC;EACH,qBAAqB,IAAAC,gCAAa,EAACH,IAAI,CAAC;IAAhCI,QAAQ,kBAARA,QAAQ;EAEhB,IAAIC,GAAG;EACP,IAAI;IACFA,GAAG,GAAG,IAAAC,wCAAqB,EAACN,IAAI,EAAEC,UAAU,EAAEC,cAAc,CAAC;IAC7D,IAAI,IAAAK,yCAAsB,EAACH,QAAQ,CAAC,CAACC,GAAG,CAAC,EAAE;MACzCA,GAAG,GAAG,IAAAG,yCAAsB,EAACP,UAAU,EAAEI,GAAG,CAAC;IAC/C;EACF,CAAC,CAAC,aAAoB;IAAA,IAAXI,OAAO,QAAPA,OAAO;IAChBJ,GAAG,GAAGK,SAAS;EACjB;EACA,OAAOL,GAAG;AACZ,CAAC;AAAA"}