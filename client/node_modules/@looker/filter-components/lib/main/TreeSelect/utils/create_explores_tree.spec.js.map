{"version":3,"file":"create_explores_tree.spec.js","names":["describe","it","expect","createExploresTree","toEqual","explore","label","model_name","name","fields","dimensions","can_filter","label_short","view_label","measures","measure","trees","toMatchSnapshot","isNotHighlightable","toBe","children","toBeUndefined"],"sources":["../../../../src/TreeSelect/utils/create_explores_tree.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { ILookmlModelExplore } from '@looker/sdk/src/4.0u/models'\nimport { createExploresTree } from './create_explores_tree'\n\n// TODO: Finish adding tests here\ndescribe('createExploresTree tests', () => {\n  it('should return empty array given empty explores', () => {\n    expect(createExploresTree([])).toEqual([])\n  })\n\n  it('should mark explore-level entries as not highlightable', () => {\n    const explore: ILookmlModelExplore[] = [\n      {\n        label: 'explore-a',\n        model_name: 'model-a',\n        name: 'explore-a',\n        fields: {\n          dimensions: [\n            {\n              can_filter: true,\n              name: 'explore-a.dim-1',\n              label_short: 'dim-1',\n              view_label: 'view-a',\n            },\n            {\n              can_filter: true,\n              name: 'explore-a.dim-2',\n              label_short: 'dim-2',\n              view_label: 'view-b',\n            },\n          ],\n          measures: [\n            {\n              can_filter: true,\n              measure: true,\n              name: 'explore-a.measure-1',\n              label_short: 'measure-1',\n              view_label: 'view-a',\n            },\n            {\n              can_filter: true,\n              measure: true,\n              name: 'explore-a.measure-2',\n              label_short: 'measure-2',\n              view_label: 'view-b',\n            },\n          ],\n        },\n      } as ILookmlModelExplore,\n    ]\n\n    const trees = createExploresTree(explore)\n\n    expect(trees).toMatchSnapshot()\n\n    expect(trees[0].isNotHighlightable).toBe(true)\n    expect(\n      trees[0].children?.[0].children?.[0].isNotHighlightable\n    ).toBeUndefined()\n  })\n})\n"],"mappings":";;AAMA;;AAGAA,QAAQ,CAAC,0BAA0B,EAAE,YAAM;EACzCC,EAAE,CAAC,gDAAgD,EAAE,YAAM;IACzDC,MAAM,CAAC,IAAAC,wCAAkB,EAAC,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,EAAE,CAAC;EAC5C,CAAC,CAAC;EAEFH,EAAE,CAAC,wDAAwD,EAAE,YAAM;IAAA;IACjE,IAAMI,OAA8B,GAAG,CACrC;MACEC,KAAK,EAAE,WAAW;MAClBC,UAAU,EAAE,SAAS;MACrBC,IAAI,EAAE,WAAW;MACjBC,MAAM,EAAE;QACNC,UAAU,EAAE,CACV;UACEC,UAAU,EAAE,IAAI;UAChBH,IAAI,EAAE,iBAAiB;UACvBI,WAAW,EAAE,OAAO;UACpBC,UAAU,EAAE;QACd,CAAC,EACD;UACEF,UAAU,EAAE,IAAI;UAChBH,IAAI,EAAE,iBAAiB;UACvBI,WAAW,EAAE,OAAO;UACpBC,UAAU,EAAE;QACd,CAAC,CACF;QACDC,QAAQ,EAAE,CACR;UACEH,UAAU,EAAE,IAAI;UAChBI,OAAO,EAAE,IAAI;UACbP,IAAI,EAAE,qBAAqB;UAC3BI,WAAW,EAAE,WAAW;UACxBC,UAAU,EAAE;QACd,CAAC,EACD;UACEF,UAAU,EAAE,IAAI;UAChBI,OAAO,EAAE,IAAI;UACbP,IAAI,EAAE,qBAAqB;UAC3BI,WAAW,EAAE,WAAW;UACxBC,UAAU,EAAE;QACd,CAAC;MAEL;IACF,CAAC,CACF;IAED,IAAMG,KAAK,GAAG,IAAAb,wCAAkB,EAACE,OAAO,CAAC;IAEzCH,MAAM,CAACc,KAAK,CAAC,CAACC,eAAe,EAAE;IAE/Bf,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAACE,kBAAkB,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC9CjB,MAAM,sBACJc,KAAK,CAAC,CAAC,CAAC,CAACI,QAAQ,+EAAjB,kBAAoB,CAAC,CAAC,CAACA,QAAQ,0DAA/B,sBAAkC,CAAC,CAAC,CAACF,kBAAkB,CACxD,CAACG,aAAa,EAAE;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC"}