{"version":3,"file":"search_tree.js","names":["searchTree","trees","search","parentIsOpen","map","tree","isOpen","isNotHighlightable","containsString","match","undefined","children","childContains","some","child","hide","label","value","str2","toLowerCase","includes","hasAnyVisibleEntry","entry"],"sources":["../../../../src/TreeSelect/utils/search_tree.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport type { TreeModel } from '../types'\nimport { ReplaceText } from '@looker/components'\n\n// TODO: find matches if words in middle of string; fuzzify it.\n/**\n * Given a search string, highlight every occurrence of that string and\n * if it's a section name, open the section.\n * @param trees\n * @param search\n * @param parentIsOpen\n */\nexport const searchTree = (\n  trees: TreeModel[],\n  search?: string,\n  parentIsOpen?: boolean\n): TreeModel[] =>\n  trees.map(tree => {\n    const isOpen =\n      (!tree.isNotHighlightable && containsString(tree, search)) ||\n      !!parentIsOpen\n    const match = tree.isNotHighlightable ? undefined : search\n\n    if (tree.children) {\n      const children = searchTree(tree.children, search, isOpen)\n      const childContains = children.some(child => child.isOpen)\n\n      return {\n        ...tree,\n        isOpen: isOpen || childContains,\n        hide: !isOpen && !childContains && search !== '',\n        label: <ReplaceText match={match}>{tree.value}</ReplaceText>,\n        children,\n      }\n    } else {\n      return {\n        ...tree,\n        label: <ReplaceText match={match}>{tree.value}</ReplaceText>,\n        isOpen,\n        hide: !isOpen && search !== '',\n      }\n    }\n  })\n\nexport const containsString = ({ value }: TreeModel, str2?: string) =>\n  !!(str2 && value.toLowerCase().includes(str2.toLowerCase()))\n\n/**\n * Returns TRUE if there is any first-level entry in the\n * given \"tree\"  that is not hidden.\n *\n * Since we do hide the children whenever a parent\n * entry is hidden and hide the parent if all children are\n * hidden, we can safely check on the first level of entries\n * in the tree.\n *\n * @param tree the tree to check for visibility\n */\nexport const hasAnyVisibleEntry = (tree?: TreeModel[]) =>\n  (tree || []).some(entry => !entry.hide)\n"],"mappings":";;;;;;;;AAIA;AAEA;AAAgD;AAAA;AAUzC,IAAMA,UAAU,GAAG,SAAbA,UAAU,CACrBC,KAAkB,EAClBC,MAAe,EACfC,YAAsB;EAAA,OAEtBF,KAAK,CAACG,GAAG,CAAC,UAAAC,IAAI,EAAI;IAChB,IAAMC,MAAM,GACT,CAACD,IAAI,CAACE,kBAAkB,IAAIC,cAAc,CAACH,IAAI,EAAEH,MAAM,CAAC,IACzD,CAAC,CAACC,YAAY;IAChB,IAAMM,KAAK,GAAGJ,IAAI,CAACE,kBAAkB,GAAGG,SAAS,GAAGR,MAAM;IAE1D,IAAIG,IAAI,CAACM,QAAQ,EAAE;MACjB,IAAMA,QAAQ,GAAGX,UAAU,CAACK,IAAI,CAACM,QAAQ,EAAET,MAAM,EAAEI,MAAM,CAAC;MAC1D,IAAMM,aAAa,GAAGD,QAAQ,CAACE,IAAI,CAAC,UAAAC,KAAK;QAAA,OAAIA,KAAK,CAACR,MAAM;MAAA,EAAC;MAE1D,uCACKD,IAAI;QACPC,MAAM,EAAEA,MAAM,IAAIM,aAAa;QAC/BG,IAAI,EAAE,CAACT,MAAM,IAAI,CAACM,aAAa,IAAIV,MAAM,KAAK,EAAE;QAChDc,KAAK,EAAE,gCAAC,uBAAW;UAAC,KAAK,EAAEP;QAAM,GAAEJ,IAAI,CAACY,KAAK,CAAe;QAC5DN,QAAQ,EAARA;MAAQ;IAEZ,CAAC,MAAM;MACL,uCACKN,IAAI;QACPW,KAAK,EAAE,gCAAC,uBAAW;UAAC,KAAK,EAAEP;QAAM,GAAEJ,IAAI,CAACY,KAAK,CAAe;QAC5DX,MAAM,EAANA,MAAM;QACNS,IAAI,EAAE,CAACT,MAAM,IAAIJ,MAAM,KAAK;MAAE;IAElC;EACF,CAAC,CAAC;AAAA;AAAA;AAEG,IAAMM,cAAc,GAAG,SAAjBA,cAAc,OAA0BU,IAAa;EAAA,IAAjCD,KAAK,QAALA,KAAK;EAAA,OACpC,CAAC,EAAEC,IAAI,IAAID,KAAK,CAACE,WAAW,EAAE,CAACC,QAAQ,CAACF,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC;AAAA;;AAAA;AAavD,IAAME,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIhB,IAAkB;EAAA,OACnD,CAACA,IAAI,IAAI,EAAE,EAAEQ,IAAI,CAAC,UAAAS,KAAK;IAAA,OAAI,CAACA,KAAK,CAACP,IAAI;EAAA,EAAC;AAAA;AAAA"}