{"version":3,"file":"use_expression_state.js","names":["useContext","useEffect","useState","useControlWarn","FilterContext","useExpressionState","expression","propsExpression","filter","onChange","updateExpression","isControlled","controllingProps","isControlledCheck","undefined","name","uncontrolledExpression","setExpression","default_value","handleChange","value"],"sources":["../../../src/DashboardFilter/use_expression_state.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useContext, useEffect, useState } from 'react'\nimport { useControlWarn } from '@looker/components'\nimport type { IDashboardFilter } from '@looker/sdk'\nimport type { FilterChangeProps } from '../Filter/types/filter_props'\nimport { FilterContext } from '../FilterCollection'\n\nexport interface UseExpressionStateProps {\n  /**\n   * The current value of the filter.\n   * See {@link https://cloud.google.com/looker/docs/reference/filter-expressions Looker Filter Expressions}.\n   */\n  expression?: string\n  /**\n   * A dashboard filter as defined in @looker/sdk\n   */\n  filter: IDashboardFilter\n  /**\n   * Called when the filter expression is changed\n   */\n  onChange: (expression: string) => void\n}\n\n/**\n * Custom state hook for filter expression\n */\nexport const useExpressionState = ({\n  expression: propsExpression,\n  filter,\n  onChange,\n}: UseExpressionStateProps) => {\n  const { updateExpression } = useContext(FilterContext)\n\n  const isControlled = useControlWarn({\n    controllingProps: ['expression'],\n    isControlledCheck: () => propsExpression !== undefined,\n    name: 'DashboardFilter',\n  })\n  const [uncontrolledExpression, setExpression] = useState(\n    propsExpression || filter.default_value || ''\n  )\n\n  const handleChange = (value: FilterChangeProps) => {\n    setExpression(value.expression)\n    onChange(value.expression)\n  }\n\n  const expression = isControlled\n    ? propsExpression || ''\n    : uncontrolledExpression\n\n  useEffect(() => {\n    updateExpression(filter, expression)\n  }, [filter, expression, updateExpression])\n\n  return {\n    expression,\n    onChange: handleChange,\n  }\n}\n"],"mappings":";AAIA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,cAAc,QAAQ,oBAAoB;AAGnD,SAASC,aAAa,QAAQ,qBAAqB;AAqBnD,OAAO,MAAMC,kBAAkB,GAAG,CAAC;EACjCC,UAAU,EAAEC,eAAe;EAC3BC,MAAM;EACNC;AACuB,CAAC,KAAK;EAC7B,MAAM;IAAEC;EAAiB,CAAC,GAAGV,UAAU,CAACI,aAAa,CAAC;EAEtD,MAAMO,YAAY,GAAGR,cAAc,CAAC;IAClCS,gBAAgB,EAAE,CAAC,YAAY,CAAC;IAChCC,iBAAiB,EAAE,MAAMN,eAAe,KAAKO,SAAS;IACtDC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,sBAAsB,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CACtDK,eAAe,IAAIC,MAAM,CAACU,aAAa,IAAI,EAAE,CAC9C;EAED,MAAMC,YAAY,GAAIC,KAAwB,IAAK;IACjDH,aAAa,CAACG,KAAK,CAACd,UAAU,CAAC;IAC/BG,QAAQ,CAACW,KAAK,CAACd,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMA,UAAU,GAAGK,YAAY,GAC3BJ,eAAe,IAAI,EAAE,GACrBS,sBAAsB;EAE1Bf,SAAS,CAAC,MAAM;IACdS,gBAAgB,CAACF,MAAM,EAAEF,UAAU,CAAC;EACtC,CAAC,EAAE,CAACE,MAAM,EAAEF,UAAU,EAAEI,gBAAgB,CAAC,CAAC;EAE1C,OAAO;IACLJ,UAAU;IACVG,QAAQ,EAAEU;EACZ,CAAC;AACH,CAAC"}