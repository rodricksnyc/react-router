{"version":3,"file":"YearMonth.spec.js","names":["renderWithTheme","fireEvent","screen","React","YearMonth","describe","onChangeMock","jest","fn","mockProps","item","id","month","year","onChange","beforeEach","mockReset","it","expect","getByText","toBeVisible","getByDisplayValue","input","change","target","value","toHaveBeenCalledWith","focus","mouseDown","march","click"],"sources":["../../../../../../../../../src/Filter/components/AdvancedFilter/components/DateFilter/components/YearMonth/YearMonth.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport { fireEvent, screen } from '@testing-library/react'\nimport React from 'react'\nimport type { FilterParamProps } from '../../../../../../types/filter_param_props'\nimport { YearMonth } from './YearMonth'\n\ndescribe('YearMonth', () => {\n  const onChangeMock = jest.fn()\n  const mockProps = {\n    item: {\n      id: '1',\n      month: '1',\n      year: '2017',\n    },\n    onChange: onChangeMock,\n  } as unknown as FilterParamProps\n\n  beforeEach(() => {\n    onChangeMock.mockReset()\n  })\n\n  it('should render the given year and month', () => {\n    renderWithTheme(<YearMonth {...mockProps} />)\n    expect(screen.getByText('January')).toBeVisible()\n    expect(screen.getByDisplayValue('2017')).toBeVisible()\n  })\n\n  it('should invoke the onChange handler when the year changes', () => {\n    renderWithTheme(<YearMonth {...mockProps} />)\n    const input = screen.getByDisplayValue('2017')\n    fireEvent.change(input, { target: { value: '2018' } })\n    expect(onChangeMock).toHaveBeenCalledWith('1', { year: '2018' })\n  })\n\n  it('should invoke the onChange handler when the month changes', async () => {\n    renderWithTheme(<YearMonth {...mockProps} />)\n    const input = screen.getByDisplayValue('January')\n    fireEvent.focus(input)\n    fireEvent.mouseDown(input)\n    const march = screen.getByText('March')\n    fireEvent.click(march)\n    expect(onChangeMock).toHaveBeenCalledWith('1', { month: '03' })\n  })\n})\n"],"mappings":";AAIA,SAASA,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,SAAS,EAAEC,MAAM,QAAQ,wBAAwB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,aAAa;AAEvCC,QAAQ,CAAC,WAAW,EAAE,MAAM;EAC1B,MAAMC,YAAY,GAAGC,IAAI,CAACC,EAAE,EAAE;EAC9B,MAAMC,SAAS,GAAG;IAChBC,IAAI,EAAE;MACJC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE;IACR,CAAC;IACDC,QAAQ,EAAER;EACZ,CAAgC;EAEhCS,UAAU,CAAC,MAAM;IACfT,YAAY,CAACU,SAAS,EAAE;EAC1B,CAAC,CAAC;EAEFC,EAAE,CAAC,wCAAwC,EAAE,MAAM;IACjDjB,eAAe,CAAC,oBAAC,SAAS,EAAKS,SAAS,CAAI,CAAC;IAC7CS,MAAM,CAAChB,MAAM,CAACiB,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,WAAW,EAAE;IACjDF,MAAM,CAAChB,MAAM,CAACmB,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAACD,WAAW,EAAE;EACxD,CAAC,CAAC;EAEFH,EAAE,CAAC,0DAA0D,EAAE,MAAM;IACnEjB,eAAe,CAAC,oBAAC,SAAS,EAAKS,SAAS,CAAI,CAAC;IAC7C,MAAMa,KAAK,GAAGpB,MAAM,CAACmB,iBAAiB,CAAC,MAAM,CAAC;IAC9CpB,SAAS,CAACsB,MAAM,CAACD,KAAK,EAAE;MAAEE,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE,CAAC,CAAC;IACtDP,MAAM,CAACZ,YAAY,CAAC,CAACoB,oBAAoB,CAAC,GAAG,EAAE;MAAEb,IAAI,EAAE;IAAO,CAAC,CAAC;EAClE,CAAC,CAAC;EAEFI,EAAE,CAAC,2DAA2D,EAAE,YAAY;IAC1EjB,eAAe,CAAC,oBAAC,SAAS,EAAKS,SAAS,CAAI,CAAC;IAC7C,MAAMa,KAAK,GAAGpB,MAAM,CAACmB,iBAAiB,CAAC,SAAS,CAAC;IACjDpB,SAAS,CAAC0B,KAAK,CAACL,KAAK,CAAC;IACtBrB,SAAS,CAAC2B,SAAS,CAACN,KAAK,CAAC;IAC1B,MAAMO,KAAK,GAAG3B,MAAM,CAACiB,SAAS,CAAC,OAAO,CAAC;IACvClB,SAAS,CAAC6B,KAAK,CAACD,KAAK,CAAC;IACtBX,MAAM,CAACZ,YAAY,CAAC,CAACoB,oBAAoB,CAAC,GAAG,EAAE;MAAEd,KAAK,EAAE;IAAK,CAAC,CAAC;EACjE,CAAC,CAAC;AACJ,CAAC,CAAC"}