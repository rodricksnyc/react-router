{"version":3,"file":"ControlFilter.js","names":["React","useEffect","getControlFilterInfo","calculateSuggestOptions","getFilterTokenItem","ControlFilter","ast","expressionType","validationMessage","dispatchConfigTypeChange","adapterProps","config","field","Component","props","filterTokenProps","type","date","onChange","value","onInputChange","filterTokenInputChange","restProps","toggleOptions","display","category"],"sources":["../../../../../src/Filter/components/ControlFilter/ControlFilter.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useEffect } from 'react'\nimport type { InternalFilterProps } from '../../types/filter_props'\nimport { getControlFilterInfo, calculateSuggestOptions } from '../../utils'\nimport { getFilterTokenItem } from '../../utils/get_filter_token_item'\n\n/**\n * Visual filters that can take the form of radio buttons, checkboxes, etc.\n */\nexport const ControlFilter = ({\n  ast,\n  expressionType,\n  validationMessage,\n  dispatchConfigTypeChange = false,\n  ...adapterProps\n}: InternalFilterProps) => {\n  const { config, field } = adapterProps\n  const { Component, props: filterTokenProps } = getControlFilterInfo(\n    getFilterTokenItem(ast || {}, expressionType, config.type),\n    adapterProps\n  )\n\n  /**\n   * This effect is used by FilterEditorSettings in Edit Mode\n   * because we currently delegate initializing filter value to the Filter components\n   * TODO: refactor initializing filters with proper values then remove this effect\n   */\n  useEffect(() => {\n    // When control type changes in Edit Mode, update value and default value of filter\n    if (dispatchConfigTypeChange) {\n      if (filterTokenProps?.date) {\n        filterTokenProps?.onChange(filterTokenProps?.date)\n      } else {\n        filterTokenProps?.onChange(filterTokenProps?.value)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [config.type])\n\n  if (!filterTokenProps || !Component) {\n    // props or Component not available - nothing to render\n    return null\n  }\n\n  const { onInputChange: filterTokenInputChange, ...restProps } =\n    filterTokenProps\n\n  const toggleOptions = calculateSuggestOptions(filterTokenProps)\n\n  return (\n    <Component\n      onInputChange={filterTokenInputChange}\n      inline={config.display === 'inline'}\n      validationMessage={validationMessage}\n      anyOption={!(field?.category === 'parameter')}\n      {...restProps}\n      options={toggleOptions}\n    />\n  )\n}\n"],"mappings":";;;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,aAAa;AAC3E,SAASC,kBAAkB,QAAQ,mCAAmC;;AAKtE,OAAO,MAAMC,aAAa,GAAG,QAMF;EAAA,IANG;MAC5BC,GAAG;MACHC,cAAc;MACdC,iBAAiB;MACjBC,wBAAwB,GAAG;IAER,CAAC;IADjBC,YAAY;EAEf,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGF,YAAY;EACtC,MAAM;IAAEG,SAAS;IAAEC,KAAK,EAAEC;EAAiB,CAAC,GAAGb,oBAAoB,CACjEE,kBAAkB,CAACE,GAAG,IAAI,CAAC,CAAC,EAAEC,cAAc,EAAEI,MAAM,CAACK,IAAI,CAAC,EAC1DN,YAAY,CACb;;EAODT,SAAS,CAAC,MAAM;IAEd,IAAIQ,wBAAwB,EAAE;MAC5B,IAAIM,gBAAgB,aAAhBA,gBAAgB,eAAhBA,gBAAgB,CAAEE,IAAI,EAAE;QAC1BF,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEG,QAAQ,CAACH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEE,IAAI,CAAC;MACpD,CAAC,MAAM;QACLF,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEG,QAAQ,CAACH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEI,KAAK,CAAC;MACrD;IACF;EAEF,CAAC,EAAE,CAACR,MAAM,CAACK,IAAI,CAAC,CAAC;EAEjB,IAAI,CAACD,gBAAgB,IAAI,CAACF,SAAS,EAAE;IAEnC,OAAO,IAAI;EACb;EAEA,MAAM;MAAEO,aAAa,EAAEC;IAAqC,CAAC,GAC3DN,gBAAgB;IADgCO,SAAS,4BACzDP,gBAAgB;EAElB,MAAMQ,aAAa,GAAGpB,uBAAuB,CAACY,gBAAgB,CAAC;EAE/D,OACE,oBAAC,SAAS;IACR,aAAa,EAAEM,sBAAuB;IACtC,MAAM,EAAEV,MAAM,CAACa,OAAO,KAAK,QAAS;IACpC,iBAAiB,EAAEhB,iBAAkB;IACrC,SAAS,EAAE,EAAE,CAAAI,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEa,QAAQ,MAAK,WAAW;EAAE,GAC1CH,SAAS;IACb,OAAO,EAAEC;EAAc,GACvB;AAEN,CAAC"}