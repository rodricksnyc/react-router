{"version":3,"file":"update_ast.js","names":["typeToGrammar","parseFilterExpression","getMatchesAdvancedNode","hasMatchesAdvancedNode","updateASTFromProps","type","expression","userAttributes","subTypes","ast","message","undefined"],"sources":["../../../../src/Filter/utils/update_ast.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type {\n  UserAttributeWithValue,\n  FilterExpressionType,\n} from '@looker/filter-expressions'\nimport {\n  typeToGrammar,\n  parseFilterExpression,\n  getMatchesAdvancedNode,\n  hasMatchesAdvancedNode,\n} from '@looker/filter-expressions'\n\n/**\n * Creates and returns an AST given the filter's type, expression, and any optional userAttributes.\n */\nexport const updateASTFromProps = (\n  type: FilterExpressionType,\n  expression: string,\n  userAttributes?: UserAttributeWithValue[]\n) => {\n  const { subTypes } = typeToGrammar(type)\n\n  let ast\n  try {\n    ast = parseFilterExpression(type, expression, userAttributes)\n    if (hasMatchesAdvancedNode(subTypes)(ast)) {\n      ast = getMatchesAdvancedNode(expression, ast)\n    }\n  } catch ({ message }) {\n    ast = undefined\n  }\n  return ast\n}\n"],"mappings":";;AAQA,SACEA,aAAa,EACbC,qBAAqB,EACrBC,sBAAsB,EACtBC,sBAAsB,QACjB,4BAA4B;;AAKnC,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,IAA0B,EAC1BC,UAAkB,EAClBC,cAAyC,KACtC;EACH,MAAM;IAAEC;EAAS,CAAC,GAAGR,aAAa,CAACK,IAAI,CAAC;EAExC,IAAII,GAAG;EACP,IAAI;IACFA,GAAG,GAAGR,qBAAqB,CAACI,IAAI,EAAEC,UAAU,EAAEC,cAAc,CAAC;IAC7D,IAAIJ,sBAAsB,CAACK,QAAQ,CAAC,CAACC,GAAG,CAAC,EAAE;MACzCA,GAAG,GAAGP,sBAAsB,CAACI,UAAU,EAAEG,GAAG,CAAC;IAC/C;EACF,CAAC,CAAC,OAAO;IAAEC;EAAQ,CAAC,EAAE;IACpBD,GAAG,GAAGE,SAAS;EACjB;EACA,OAAOF,GAAG;AACZ,CAAC"}