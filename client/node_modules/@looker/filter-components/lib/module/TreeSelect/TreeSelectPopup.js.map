{"version":3,"file":"TreeSelectPopup.js","names":["PopoverContent","usePopover","debounce","React","TreeSelectPopup","anchorElement","isOpen","setOpen","children","popupStyle","setPopupStyle","useState","useEffect","onResize","getPopupStyle","window","addEventListener","removeEventListener","popover","content","focusTrap","triggerElement","triggerToggle","anchor","rect","getBoundingClientRect","minWidth","width","left","top","height"],"sources":["../../../src/TreeSelect/TreeSelectPopup.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { PopoverContent, usePopover } from '@looker/components'\nimport debounce from 'lodash/debounce'\nimport React from 'react'\n\ntype TreePopupProps = React.PropsWithChildren<{\n  anchorElement: HTMLElement | null\n  isOpen: boolean\n  setOpen: (value: boolean) => void\n}>\n\ninterface PopupStyle {\n  minWidth?: string\n  left?: string\n  top?: string\n}\n\nexport const TreeSelectPopup = ({\n  anchorElement,\n  isOpen,\n  setOpen,\n  children,\n}: TreePopupProps) => {\n  const [popupStyle, setPopupStyle] = React.useState<PopupStyle>()\n\n  React.useEffect(() => {\n    const onResize = debounce(() => {\n      setPopupStyle(getPopupStyle(anchorElement))\n    }, 200)\n    window.addEventListener('resize', onResize)\n    setPopupStyle(getPopupStyle(anchorElement))\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  }, [anchorElement])\n\n  const { popover } = usePopover({\n    content: <PopoverContent style={popupStyle}>{children}</PopoverContent>,\n    focusTrap: false,\n    isOpen,\n    setOpen,\n    triggerElement: anchorElement,\n    triggerToggle: false,\n  })\n\n  return popover || null\n}\n\nconst getPopupStyle = (anchor: HTMLElement | null) => {\n  if (!anchor) return {}\n  // getBoundingClientRect used only once per user interaction\n  // and won't affect performance badly.\n  //\n  // getBoundingClientRect required to properly position\n  // popup below anchor input. Other css solution\n  // (where popup lives withing the same container\n  // with anchor input) will still require getBoundingClientRect\n  // to make sure popup won't go out of window size.\n  const rect = anchor.getBoundingClientRect()\n  return {\n    minWidth: rect.width + 'px',\n    left: rect.left + 'px',\n    top: rect.top + rect.height + 'px',\n  }\n}\n"],"mappings":";AAIA,SAASA,cAAc,EAAEC,UAAU,QAAQ,oBAAoB;AAC/D,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AAczB,OAAO,MAAMC,eAAe,GAAG,CAAC;EAC9BC,aAAa;EACbC,MAAM;EACNC,OAAO;EACPC;AACc,CAAC,KAAK;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,KAAK,CAACQ,QAAQ,EAAc;EAEhER,KAAK,CAACS,SAAS,CAAC,MAAM;IACpB,MAAMC,QAAQ,GAAGX,QAAQ,CAAC,MAAM;MAC9BQ,aAAa,CAACI,aAAa,CAACT,aAAa,CAAC,CAAC;IAC7C,CAAC,EAAE,GAAG,CAAC;IACPU,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IAC3CH,aAAa,CAACI,aAAa,CAACT,aAAa,CAAC,CAAC;IAC3C,OAAO,MAAM;MACXU,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEJ,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACR,aAAa,CAAC,CAAC;EAEnB,MAAM;IAAEa;EAAQ,CAAC,GAAGjB,UAAU,CAAC;IAC7BkB,OAAO,EAAE,oBAAC,cAAc;MAAC,KAAK,EAAEV;IAAW,GAAED,QAAQ,CAAkB;IACvEY,SAAS,EAAE,KAAK;IAChBd,MAAM;IACNC,OAAO;IACPc,cAAc,EAAEhB,aAAa;IAC7BiB,aAAa,EAAE;EACjB,CAAC,CAAC;EAEF,OAAOJ,OAAO,IAAI,IAAI;AACxB,CAAC;AAED,MAAMJ,aAAa,GAAIS,MAA0B,IAAK;EACpD,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC,CAAC;EAStB,MAAMC,IAAI,GAAGD,MAAM,CAACE,qBAAqB,EAAE;EAC3C,OAAO;IACLC,QAAQ,EAAEF,IAAI,CAACG,KAAK,GAAG,IAAI;IAC3BC,IAAI,EAAEJ,IAAI,CAACI,IAAI,GAAG,IAAI;IACtBC,GAAG,EAAEL,IAAI,CAACK,GAAG,GAAGL,IAAI,CAACM,MAAM,GAAG;EAChC,CAAC;AACH,CAAC"}