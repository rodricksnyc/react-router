{"version":3,"file":"date_grammar.spec.js","names":["testDateItem","testItem","test","expression","type","describe","output","filterType","ast","parseFilterExpression","expect","toMatchSnapshot","description","summary","toBe","list","treeToList","item","toEqual","dateComponentType","convertTypeToMatchesAdvancedOption","dateOutput","dateFilterToString","beforeEach","i18nInit","e","Error","dateExpressionTestItems","forEach","basicDates","testExpression","it","each","absoluteDates","seconds","minutes","hours","days","weeks","months","quarters","years","invalidDates"],"sources":["../../../src/grammars/date_grammar.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport {\n  convertTypeToMatchesAdvancedOption,\n  i18nInit,\n  parseFilterExpression,\n  summary,\n  treeToList,\n} from '../utils'\n// import { i18nInit } from '../i18n'\nimport { dateExpressionTestItems } from './date_grammar_test_expressions'\nimport type { GrammarTestItem } from './grammar_test_utils'\nimport { dateFilterToString } from '../utils/date/date_filter_to_string'\n\nconst testDateItem = (testItem: GrammarTestItem) => {\n  test(`${testItem.expression}`, () => {\n    const { expression, type, describe, output, filterType = 'date' } = testItem\n\n    // test ast\n    const ast = parseFilterExpression(filterType, expression)\n    expect(ast).toMatchSnapshot()\n\n    // test descriptions\n    const description = summary({ type: filterType, expression })\n    expect(description).toBe(describe)\n\n    // test item type\n    const list = treeToList(ast)\n    const item = list[0]\n    if (type) {\n      expect(item.type).toEqual(type)\n    }\n\n    // test serialized output\n    // some filter types can't be represented by DateFilter,\n    // we expect this to be parsed as `type` above,\n    // but be converted to `matchesAdvanced`\n    const dateComponentType = convertTypeToMatchesAdvancedOption(item)\n    const dateOutput =\n      dateComponentType === 'matchesAdvanced'\n        ? expression\n        : dateFilterToString(ast, filterType)\n    expect(dateOutput).toBe(output)\n  })\n}\n\ndescribe('Date grammar can parse', () => {\n  beforeEach(() =>\n    i18nInit().catch((e) => {\n      throw new Error(e)\n    })\n  )\n  dateExpressionTestItems.forEach(testDateItem)\n})\n\nconst basicDates = [\n  'this day',\n  'this day to second',\n  'this year to second',\n  'this year to day',\n  '3 days',\n  '3 days ago',\n  '3 months ago for 2 days',\n  'before 3 days ago',\n  'before 2018-01-01 12:00:00',\n  'after 2018-10-05',\n  '2018-05-18 12:00:00 to 2018-05-18 14:00:00',\n  '2018-01-01 12:00:00 for 3 days',\n  'today',\n  'yesterday',\n  'tomorrow',\n  'Monday',\n  'next week',\n  '3 days from now',\n  '3 days from now for 2 weeks',\n  '',\n]\n\nconst testExpression = (expression: string) => {\n  expect(parseFilterExpression('date', expression)).toMatchSnapshot()\n  // TODO expect(summary('date', expression)).not.toBe('')\n}\n\ndescribe('Date grammar can parse basic date', () => {\n  it.each(basicDates)('%s', testExpression)\n})\n\nconst absoluteDates = [\n  '2018/05/29',\n  '2018/05/10 for 3 days',\n  'after 2018/05/10',\n  'before 2018/05/10',\n  '2018/05',\n  '2018/05 for 2 months',\n  '2018/05/10 05:00 for 5 hours',\n  '2018/05/10 for 5 months',\n  '2018',\n  'FY2018',\n  'FY2018-Q1',\n]\n\ndescribe('Date grammar can parse absolute date', () => {\n  it.each(absoluteDates)('%s', testExpression)\n})\n\nconst seconds = ['1 second', '60 seconds', '60 seconds ago for 1 second']\ndescribe('Date grammar can parse seconds', () => {\n  it.each(seconds)('%s', testExpression)\n})\n\nconst minutes = ['1 minute', '60 minutes', '60 minutes ago for 1 minute']\ndescribe('Date grammar can parse minutes', () => {\n  it.each(minutes)('%s', testExpression)\n})\n\nconst hours = ['1 hour', '24 hours', '24 hours ago for 1 hour']\n\ndescribe('Date grammar can parse hours', () => {\n  it.each(hours)('%s', testExpression)\n})\nconst days = [\n  'today',\n  '2 days',\n  '1 day ago',\n  '7 days ago for 7 days',\n  'today for 7 days',\n  'last 3 days',\n  '7 days from now',\n]\ndescribe('Date grammar can parse days', () => {\n  it.each(days)('%s', testExpression)\n})\n\nconst weeks = [\n  '1 week',\n  'this week',\n  'before this week',\n  'after this week',\n  'next week',\n  '2 weeks',\n  '2 weeks ago for 2 weeks',\n  'last week',\n  '1 week ago',\n]\ndescribe('Date grammar can parse weeks', () => {\n  it.each(weeks)('%s', testExpression)\n})\n\nconst months = [\n  '1 month',\n  'this month',\n  '2 months',\n  'last month',\n  '2 months ago',\n  '2 months ago for 2 months',\n  'before 2 months ago',\n  'before 2 months',\n  'before 2 months from now',\n  'next month',\n  '2 months from now',\n  '6 months from now for 3 months',\n]\n\ndescribe('Date grammar can parse months', () => {\n  it.each(months)('%s', testExpression)\n})\n\nconst quarters = [\n  '1 quarter',\n  'this quarter',\n  '2 quarters',\n  'last quarter',\n  '2 quarters ago',\n  'before 2 quarters ago',\n  'next quarter',\n  '2018-07-01 for 1 quarter',\n  '2018-Q4',\n]\n\ndescribe('Date grammar can parse quarters', () => {\n  it.each(quarters)('%s', testExpression)\n})\n\nconst years = [\n  '1 year',\n  'this year',\n  'next year',\n  '2 years',\n  '2 years ago for 2 years',\n  'last year',\n  '2 years ago',\n  'before 2 years ago',\n]\n\ndescribe('Date grammar can parse years', () => {\n  it.each(years)('%s', testExpression)\n})\n\ndescribe('Date grammar with multiple clauses', () => {\n  it('parse correctly', () =>\n    expect(testExpression('1 year ago, 1 month ago')).toMatchSnapshot())\n})\n\nconst invalidDates = ['-1', 'not a valid date']\n\ndescribe('Date grammar invalid dates show as matches advanced type', () => {\n  it.each(invalidDates)('%s', testExpression)\n})\n"],"mappings":"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"}