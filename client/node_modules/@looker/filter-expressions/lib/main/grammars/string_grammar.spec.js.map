{"version":3,"file":"string_grammar.spec.js","names":["filterType","testStringItem","testItem","test","expression","type","describe","output","ast","parseFilterExpression","description","summary","expect","toMatchSnapshot","list","treeToList","item","itemType","convertTypeToOption","toEqual","toBe","stringOutput","stringFilterToString","beforeEach","i18nInit","stringGrammarTestItems","forEach","it","value","toHaveLength","toMatchInlineSnapshot"],"sources":["../../../src/grammars/string_grammar.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { parseFilterExpression } from '../utils'\nimport { i18nInit } from '../utils/i18n'\nimport type { GrammarTestItem } from './grammar_test_utils'\nimport { stringGrammarTestItems } from './string_grammar_test_expressions'\n\nimport { convertTypeToOption } from '../utils/option/convert_type_to_option'\nimport { stringFilterToString } from '../utils/string/string_filter_to_string'\nimport { summary } from '../utils/summary/summary'\nimport { treeToList } from '../utils/tree/tree_to_list'\n\nconst filterType = 'string'\nconst testStringItem = (testItem: GrammarTestItem) => {\n  test(`${testItem.expression}`, () => {\n    const { expression, type, describe, output } = testItem\n    const ast = parseFilterExpression(filterType, expression)\n    const description = summary({ type: filterType, expression })\n    expect(ast).toMatchSnapshot()\n    const list = treeToList(ast)\n    const item = list[0]\n\n    const itemType =\n      type === 'matchesAdvanced' ? item.type : convertTypeToOption(item)\n    expect(itemType).toEqual(type)\n\n    // test descriptions\n    expect(description).toBe(describe)\n\n    // test output\n    const stringOutput =\n      type === 'matchesAdvanced' ? expression : stringFilterToString(ast)\n    expect(stringOutput).toBe(output)\n  })\n}\n\ndescribe('String grammar can parse', () => {\n  beforeEach(() => i18nInit())\n  stringGrammarTestItems.forEach(testStringItem)\n})\n\ndescribe('String grammar can parse expanded character sets', () => {\n  it('can parse japanese characters', () => {\n    const expression = 'りんご,グレープ'\n    const ast = parseFilterExpression('string', expression)\n    const { type, value } = ast\n    expect(type).toBe('match')\n    expect(value).toHaveLength(2)\n    expect(value[0]).toBe('りんご')\n    expect(value[1]).toBe('グレープ')\n    expect(ast).toMatchInlineSnapshot(`\n      Object {\n        \"id\": 1,\n        \"is\": true,\n        \"left\": undefined,\n        \"right\": undefined,\n        \"type\": \"match\",\n        \"value\": Array [\n          \"りんご\",\n          \"グレープ\",\n        ],\n      }\n    `)\n  })\n})\n"],"mappings":";;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAMA,UAAU,GAAG,QAAQ;AAC3B,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,QAAyB,EAAK;EACpDC,IAAI,WAAID,QAAQ,CAACE,UAAU,GAAI,YAAM;IACnC,IAAQA,UAAU,GAA6BF,QAAQ,CAA/CE,UAAU;MAAEC,IAAI,GAAuBH,QAAQ,CAAnCG,IAAI;MAAEC,QAAQ,GAAaJ,QAAQ,CAA7BI,QAAQ;MAAEC,MAAM,GAAKL,QAAQ,CAAnBK,MAAM;IAC1C,IAAMC,GAAG,GAAG,IAAAC,4BAAqB,EAACT,UAAU,EAAEI,UAAU,CAAC;IACzD,IAAMM,WAAW,GAAG,IAAAC,gBAAO,EAAC;MAAEN,IAAI,EAAEL,UAAU;MAAEI,UAAU,EAAVA;IAAW,CAAC,CAAC;IAC7DQ,MAAM,CAACJ,GAAG,CAAC,CAACK,eAAe,EAAE;IAC7B,IAAMC,IAAI,GAAG,IAAAC,wBAAU,EAACP,GAAG,CAAC;IAC5B,IAAMQ,IAAI,GAAGF,IAAI,CAAC,CAAC,CAAC;IAEpB,IAAMG,QAAQ,GACZZ,IAAI,KAAK,iBAAiB,GAAGW,IAAI,CAACX,IAAI,GAAG,IAAAa,2CAAmB,EAACF,IAAI,CAAC;IACpEJ,MAAM,CAACK,QAAQ,CAAC,CAACE,OAAO,CAACd,IAAI,CAAC;;IAG9BO,MAAM,CAACF,WAAW,CAAC,CAACU,IAAI,CAACd,QAAQ,CAAC;;IAGlC,IAAMe,YAAY,GAChBhB,IAAI,KAAK,iBAAiB,GAAGD,UAAU,GAAG,IAAAkB,6CAAoB,EAACd,GAAG,CAAC;IACrEI,MAAM,CAACS,YAAY,CAAC,CAACD,IAAI,CAACb,MAAM,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC;AAEDD,QAAQ,CAAC,0BAA0B,EAAE,YAAM;EACzCiB,UAAU,CAAC;IAAA,OAAM,IAAAC,cAAQ,GAAE;EAAA,EAAC;EAC5BC,uDAAsB,CAACC,OAAO,CAACzB,cAAc,CAAC;AAChD,CAAC,CAAC;AAEFK,QAAQ,CAAC,kDAAkD,EAAE,YAAM;EACjEqB,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAMvB,UAAU,GAAG,UAAU;IAC7B,IAAMI,GAAG,GAAG,IAAAC,4BAAqB,EAAC,QAAQ,EAAEL,UAAU,CAAC;IACvD,IAAQC,IAAI,GAAYG,GAAG,CAAnBH,IAAI;MAAEuB,KAAK,GAAKpB,GAAG,CAAboB,KAAK;IACnBhB,MAAM,CAACP,IAAI,CAAC,CAACe,IAAI,CAAC,OAAO,CAAC;IAC1BR,MAAM,CAACgB,KAAK,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;IAC7BjB,MAAM,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,KAAK,CAAC;IAC5BR,MAAM,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,MAAM,CAAC;IAC7BR,MAAM,CAACJ,GAAG,CAAC,CAACsB,qBAAqB,6RAY/B;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}