{"version":3,"file":"format_time.js","names":["meridiemChange","hourCeil","minuteCeil","defaultMinuteValue","meridiemAm","meridiemPm","allowedTimeInputValues","exactTimeMatch","maxHourValue","hour","maxMinuteValue","minute","getAccurateMeridiem","meridiem","toUpperCase","meridiemFrom24HourTime","get12HourTimeValue","displayTimeAsIs","zeroPad2","trim","formatAndDisplayTime","get24HourTime","parseTimeInput","inputValue","split","filter","Boolean","convertToNumber","isTimeAndFormatAccurate","input","match"],"sources":["../../../../src/utils/date/format_time.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport { convertToNumber } from './convert_to_number'\nimport { zeroPad2 } from './zero_pad'\n\nexport interface TimeFormatProps {\n  hour: number\n  minute?: number\n  meridiem?: string\n}\n\nconst meridiemChange = 12\nconst hourCeil = 24\nconst minuteCeil = 60\nconst defaultMinuteValue = 0\n\nconst meridiemAm = 'AM'\nconst meridiemPm = 'PM'\n\nexport const allowedTimeInputValues = /\\d|[a|p|m]|\\s|^$/gi\n\nconst exactTimeMatch = /^(0[0-9]|1[0-9]|2[0-3]|[0-9]):([0-5][0-9])\\s(am|pm)$/gi\n\n/**\n * Given any hour value this will ensure that the houra never get higher than 23\n */\nconst maxHourValue = (hour: number) =>\n  hour <= 0 || hour >= hourCeil ? 0 : hour\n\n/**\n * Given any minute value this will ensure that the minutes never get higher than 59\n */\nconst maxMinuteValue = (minute: number) =>\n  !minute || minute < 0 || minute >= minuteCeil ? 0 : minute\n\n/**\n * Given a time segmented object this will use the provided hour\n * to ensure that the provided meridiem is an accurate match.\n * If it is not it will be replaced.\n * ex. - an input of { hour: 20, meridiem: 'am'} will return 'PM'\n */\nconst getAccurateMeridiem = ({\n  hour,\n  meridiem = meridiemAm,\n}: TimeFormatProps) =>\n  hour > meridiemChange ? meridiemPm : meridiem.toUpperCase()\n\nexport const meridiemFrom24HourTime = (hour: number) =>\n  hour >= meridiemChange && hour < hourCeil ? meridiemPm : meridiemAm\n/**\n * Given any number input this will return an appropriate 12 hour time value\n * If the number is larger than an acceptable input value within a 24 hour range\n * the return will default to 12\n *\n * @param hour Number\n */\nconst get12HourTimeValue = (hour: number) => {\n  if (hour > meridiemChange) {\n    hour = hour - meridiemChange\n  }\n\n  if (hour === 0) {\n    hour = meridiemChange\n  }\n\n  return hour\n}\n\n/**\n * Takes an object of time segments and returns a formatted\n * 12 hour time string\n */\nexport const displayTimeAsIs = ({\n  hour,\n  minute = defaultMinuteValue,\n  meridiem = '',\n}: TimeFormatProps) => `${hour}:${zeroPad2(minute)} ${meridiem}`.trim()\n\n/**\n * Given an TimeFormatProps object it will convert to a 12 hour format.\n * ex. {hour: 14, minute: 0, meridiem: ''}  will return \"2:00 PM\"\n */\nexport const formatAndDisplayTime = ({\n  hour,\n  minute = 0,\n  meridiem = meridiemAm,\n}: TimeFormatProps) =>\n  displayTimeAsIs({\n    hour: get12HourTimeValue(maxHourValue(hour)),\n    minute: maxMinuteValue(minute),\n    meridiem: getAccurateMeridiem({\n      hour: maxHourValue(hour),\n      meridiem,\n    }),\n  })\n\n/**\n * Given an TimeFormatProps object it will convert to a 24 hour format.\n * ex. {hour: 2, minute: 0, meridiem: 'pm'} will return { hour: '14', minute: '00', meridiem: 'pm'}\n */\nexport const get24HourTime = ({\n  hour,\n  minute = 0,\n  meridiem = '',\n}: TimeFormatProps) => {\n  hour = maxHourValue(hour)\n  if (meridiem.toUpperCase() === meridiemPm && hour < meridiemChange) {\n    hour = meridiemChange + hour\n  }\n\n  return {\n    hour,\n    minute: maxMinuteValue(minute),\n    meridiem: hour < meridiemChange ? meridiemAm : meridiemPm,\n  }\n}\n\nexport const parseTimeInput = (inputValue: string): TimeFormatProps => {\n  const [hour, minute, meridiem] = inputValue\n    .split(exactTimeMatch)\n    .filter(Boolean)\n  return {\n    hour: convertToNumber(hour),\n    minute: convertToNumber(minute),\n    meridiem,\n  }\n}\n\n/**\n * Tests if the time value is correctly formatted. The only acceptable format is as follows\n * HH:MM (AM | PM)\n * @param input : string\n */\nexport const isTimeAndFormatAccurate = (input: string): boolean =>\n  !!input.match(exactTimeMatch)\n"],"mappings":";;;;;;;;AAyBA;AACA;;AAQA,IAAMA,cAAc,GAAG,EAAE;AACzB,IAAMC,QAAQ,GAAG,EAAE;AACnB,IAAMC,UAAU,GAAG,EAAE;AACrB,IAAMC,kBAAkB,GAAG,CAAC;AAE5B,IAAMC,UAAU,GAAG,IAAI;AACvB,IAAMC,UAAU,GAAG,IAAI;AAEhB,IAAMC,sBAAsB,GAAG,oBAAoB;AAAA;AAE1D,IAAMC,cAAc,GAAG,wDAAwD;;AAK/E,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,IAAY;EAAA,OAChCA,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAIR,QAAQ,GAAG,CAAC,GAAGQ,IAAI;AAAA;;AAK1C,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,MAAc;EAAA,OACpC,CAACA,MAAM,IAAIA,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAIT,UAAU,GAAG,CAAC,GAAGS,MAAM;AAAA;;AAQ5D,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB;EAAA,IACvBH,IAAI,QAAJA,IAAI;IAAA,qBACJI,QAAQ;IAARA,QAAQ,8BAAGT,UAAU;EAAA,OAErBK,IAAI,GAAGT,cAAc,GAAGK,UAAU,GAAGQ,QAAQ,CAACC,WAAW,EAAE;AAAA;AAEtD,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsB,CAAIN,IAAY;EAAA,OACjDA,IAAI,IAAIT,cAAc,IAAIS,IAAI,GAAGR,QAAQ,GAAGI,UAAU,GAAGD,UAAU;AAAA;AAAA;AAQrE,IAAMY,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIP,IAAY,EAAK;EAC3C,IAAIA,IAAI,GAAGT,cAAc,EAAE;IACzBS,IAAI,GAAGA,IAAI,GAAGT,cAAc;EAC9B;EAEA,IAAIS,IAAI,KAAK,CAAC,EAAE;IACdA,IAAI,GAAGT,cAAc;EACvB;EAEA,OAAOS,IAAI;AACb,CAAC;;AAMM,IAAMQ,eAAe,GAAG,SAAlBA,eAAe;EAAA,IAC1BR,IAAI,SAAJA,IAAI;IAAA,qBACJE,MAAM;IAANA,MAAM,6BAAGR,kBAAkB;IAAA,uBAC3BU,QAAQ;IAARA,QAAQ,+BAAG,EAAE;EAAA,OACQ,UAAGJ,IAAI,cAAI,IAAAS,kBAAQ,EAACP,MAAM,CAAC,cAAIE,QAAQ,EAAGM,IAAI,EAAE;AAAA;;AAAA;AAMhE,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB;EAAA,IAC/BX,IAAI,SAAJA,IAAI;IAAA,qBACJE,MAAM;IAANA,MAAM,6BAAG,CAAC;IAAA,uBACVE,QAAQ;IAARA,QAAQ,+BAAGT,UAAU;EAAA,OAErBa,eAAe,CAAC;IACdR,IAAI,EAAEO,kBAAkB,CAACR,YAAY,CAACC,IAAI,CAAC,CAAC;IAC5CE,MAAM,EAAED,cAAc,CAACC,MAAM,CAAC;IAC9BE,QAAQ,EAAED,mBAAmB,CAAC;MAC5BH,IAAI,EAAED,YAAY,CAACC,IAAI,CAAC;MACxBI,QAAQ,EAARA;IACF,CAAC;EACH,CAAC,CAAC;AAAA;;AAAA;AAMG,IAAMQ,aAAa,GAAG,SAAhBA,aAAa,QAIH;EAAA,IAHrBZ,IAAI,SAAJA,IAAI;IAAA,qBACJE,MAAM;IAANA,MAAM,6BAAG,CAAC;IAAA,uBACVE,QAAQ;IAARA,QAAQ,+BAAG,EAAE;EAEbJ,IAAI,GAAGD,YAAY,CAACC,IAAI,CAAC;EACzB,IAAII,QAAQ,CAACC,WAAW,EAAE,KAAKT,UAAU,IAAII,IAAI,GAAGT,cAAc,EAAE;IAClES,IAAI,GAAGT,cAAc,GAAGS,IAAI;EAC9B;EAEA,OAAO;IACLA,IAAI,EAAJA,IAAI;IACJE,MAAM,EAAED,cAAc,CAACC,MAAM,CAAC;IAC9BE,QAAQ,EAAEJ,IAAI,GAAGT,cAAc,GAAGI,UAAU,GAAGC;EACjD,CAAC;AACH,CAAC;AAAA;AAEM,IAAMiB,cAAc,GAAG,SAAjBA,cAAc,CAAIC,UAAkB,EAAsB;EACrE,4BAAiCA,UAAU,CACxCC,KAAK,CAACjB,cAAc,CAAC,CACrBkB,MAAM,CAACC,OAAO,CAAC;IAAA;IAFXjB,IAAI;IAAEE,MAAM;IAAEE,QAAQ;EAG7B,OAAO;IACLJ,IAAI,EAAE,IAAAkB,kCAAe,EAAClB,IAAI,CAAC;IAC3BE,MAAM,EAAE,IAAAgB,kCAAe,EAAChB,MAAM,CAAC;IAC/BE,QAAQ,EAARA;EACF,CAAC;AACH,CAAC;;AAAA;AAOM,IAAMe,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIC,KAAa;EAAA,OACnD,CAAC,CAACA,KAAK,CAACC,KAAK,CAACvB,cAAc,CAAC;AAAA;AAAA"}