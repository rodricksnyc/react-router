{"version":3,"file":"get_expression_type.spec.js","names":["describe","it","mockField","enumerations","label","value","expect","getExpressionTypeFromField","toEqual","is_numeric","is_timeframe","type","mockField1","mockField2","category","Category","parameter"],"sources":["../../../src/utils/get_expression_type.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ILookmlModelExploreField } from '@looker/sdk'\nimport { Category } from '@looker/sdk'\nimport { getExpressionTypeFromField } from './get_expression_type'\n\ndescribe('getExpressionTypeFromField', () => {\n  it('should return \"tier\" if the field has enumerations', () => {\n    const mockField = {\n      enumerations: [\n        {\n          label: 'answer',\n          value: 42,\n        },\n      ],\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('tier')\n  })\n\n  it('should return \"number\" if the field is_numeric', () => {\n    const mockField = {\n      is_numeric: true,\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('number')\n  })\n\n  describe('is_timeframe', () => {\n    it('should return \"date\" if the field is_timeframe', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'field_type',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date')\n    })\n\n    it('should return \"date_time\" if the field is_timeframe, type is date_time', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'date_time',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date_time')\n    })\n\n    it('should return \"date_time\" if the field is_timeframe, type is date_hour', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'date_hour',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date_time')\n    })\n  })\n\n  it('should return \"location\" if the field is a \"location\" or \"location_bin_level\" type', () => {\n    const mockField1 = {\n      type: 'location',\n    } as ILookmlModelExploreField\n    const mockField2 = {\n      type: 'location_bin_level',\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField1)).toEqual('location')\n    expect(getExpressionTypeFromField(mockField2)).toEqual('location')\n  })\n\n  it('should return \"string\" by default', () => {\n    const mockField = {} as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('string')\n  })\n\n  it('should return number for number parameter (b/187940941, b/199507872)', () => {\n    const mockField = {\n      category: Category.parameter,\n      type: 'number',\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('number')\n  })\n})\n"],"mappings":";;AAKA;AACA;;AAEAA,QAAQ,CAAC,4BAA4B,EAAE,YAAM;EAC3CC,EAAE,CAAC,oDAAoD,EAAE,YAAM;IAC7D,IAAMC,SAAS,GAAG;MAChBC,YAAY,EAAE,CACZ;QACEC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE;MACT,CAAC;IAEL,CAA6B;IAC7BC,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,MAAM,CAAC;EAC/D,CAAC,CAAC;EAEFP,EAAE,CAAC,gDAAgD,EAAE,YAAM;IACzD,IAAMC,SAAS,GAAG;MAChBO,UAAU,EAAE;IACd,CAA6B;IAC7BH,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;EAEFR,QAAQ,CAAC,cAAc,EAAE,YAAM;IAC7BC,EAAE,CAAC,gDAAgD,EAAE,YAAM;MACzD,IAAMC,SAAS,GAAG;QAChBQ,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BL,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,MAAM,CAAC;IAC/D,CAAC,CAAC;IAEFP,EAAE,CAAC,wEAAwE,EAAE,YAAM;MACjF,IAAMC,SAAS,GAAG;QAChBQ,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BL,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,WAAW,CAAC;IACpE,CAAC,CAAC;IAEFP,EAAE,CAAC,wEAAwE,EAAE,YAAM;MACjF,IAAMC,SAAS,GAAG;QAChBQ,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BL,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,WAAW,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFP,EAAE,CAAC,oFAAoF,EAAE,YAAM;IAC7F,IAAMW,UAAU,GAAG;MACjBD,IAAI,EAAE;IACR,CAA6B;IAC7B,IAAME,UAAU,GAAG;MACjBF,IAAI,EAAE;IACR,CAA6B;IAC7BL,MAAM,CAAC,IAAAC,+CAA0B,EAACK,UAAU,CAAC,CAAC,CAACJ,OAAO,CAAC,UAAU,CAAC;IAClEF,MAAM,CAAC,IAAAC,+CAA0B,EAACM,UAAU,CAAC,CAAC,CAACL,OAAO,CAAC,UAAU,CAAC;EACpE,CAAC,CAAC;EAEFP,EAAE,CAAC,mCAAmC,EAAE,YAAM;IAC5C,IAAMC,SAAS,GAAG,CAAC,CAA6B;IAChDI,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;EAEFP,EAAE,CAAC,sEAAsE,EAAE,YAAM;IAC/E,IAAMC,SAAS,GAAG;MAChBY,QAAQ,EAAEC,aAAQ,CAACC,SAAS;MAC5BL,IAAI,EAAE;IACR,CAA6B;IAC7BL,MAAM,CAAC,IAAAC,+CAA0B,EAACL,SAAS,CAAC,CAAC,CAACM,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;AACJ,CAAC,CAAC"}