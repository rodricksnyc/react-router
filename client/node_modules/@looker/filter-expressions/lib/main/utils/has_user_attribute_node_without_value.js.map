{"version":3,"file":"has_user_attribute_node_without_value.js","names":["isUserAttributeNode","type","TYPE_USER_ATTRIBUTE","hasNoAttributeValue","attributeValue","hasUserAttributeNodeWithoutValue","flow","treeToList","any","allPass"],"sources":["../../../src/utils/has_user_attribute_node_without_value.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport any from 'lodash/fp/any'\nimport allPass from 'lodash/fp/allPass'\nimport flow from 'lodash/fp/flow'\nimport type { FilterModel } from '../types'\nimport { TYPE_USER_ATTRIBUTE } from '../types'\nimport { treeToList } from './tree'\n\nconst isUserAttributeNode = ({ type }: FilterModel) =>\n  type === TYPE_USER_ATTRIBUTE\n\nconst hasNoAttributeValue = ({ attributeValue }: FilterModel) => !attributeValue\n\n/**\n * checks if the ast has:\n * - any node of type 'userAttribute'\n * - and that node has no value\n */\nexport const hasUserAttributeNodeWithoutValue = flow([\n  treeToList,\n  any(allPass([isUserAttributeNode, hasNoAttributeValue])),\n])\n"],"mappings":";;;;;;;AAIA;AACA;AACA;AAEA;AACA;;AAEA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAmB;EAAA,IAAMC,IAAI,QAAJA,IAAI;EAAA,OACjCA,IAAI,KAAKC,0BAAmB;AAAA;AAE9B,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB;EAAA,IAAMC,cAAc,SAAdA,cAAc;EAAA,OAAoB,CAACA,cAAc;AAAA;;AAOzE,IAAMC,gCAAgC,GAAG,IAAAC,gBAAI,EAAC,CACnDC,gBAAU,EACV,IAAAC,eAAG,EAAC,IAAAC,mBAAO,EAAC,CAACT,mBAAmB,EAAEG,mBAAmB,CAAC,CAAC,CAAC,CACzD,CAAC;AAAA"}