{"version":3,"file":"sanitize_string.spec.js","names":["describe","it","expression","ast","parseFilterExpression","item","sanitizeString","type","expect","value","toMatchObject","toBe","userAttributeWithValue","name","label","rank","value_is_hidden","source","hidden_value_domain_whitelist","user_attribute_id","user_can_edit","user_id","can","toMatchSnapshot"],"sources":["../../../../src/utils/string/sanitize_string.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { UserAttributeWithValue, FilterModel } from '../../types'\nimport { parseFilterExpression } from '../parse_filter_expression'\nimport { sanitizeString } from './sanitize_string'\n\ndescribe('Sanitize String tests', () => {\n  it('works when switching to startsWith', () => {\n    const expression = 'foo'\n    const ast = parseFilterExpression('string', expression)\n    const item = sanitizeString({ ...ast, type: 'startsWith' } as FilterModel)\n    expect(item.value).toMatchObject(['foo'])\n    expect(item.type).toBe('startsWith')\n  })\n\n  it('works when switching to match', () => {\n    const expression = 'foo'\n    const ast = parseFilterExpression('string', expression)\n    const item = sanitizeString({ ...ast, type: 'match' } as FilterModel)\n    expect(item.value).toMatchObject(['foo'])\n    expect(item.type).toBe('match')\n  })\n\n  it('replaces the userAttribute value when switching to match', () => {\n    const userAttributeWithValue: UserAttributeWithValue = {\n      name: 'id',\n      label: 'id',\n      value: 'ua',\n      rank: 0,\n      value_is_hidden: false,\n      source: '',\n      hidden_value_domain_whitelist: '',\n      user_attribute_id: '1',\n      user_can_edit: false,\n      user_id: '1',\n      can: {},\n    }\n    const expression = `{{ _user_attributes['id'] }}`\n    const ast = parseFilterExpression('string', expression, [\n      userAttributeWithValue,\n    ])\n    expect(ast).toMatchSnapshot()\n    const item = sanitizeString({ ...ast, type: 'match' } as FilterModel, [\n      userAttributeWithValue,\n    ])\n    expect(item.value).toMatchObject(['ua'])\n    expect(item.type).toBe('match')\n  })\n})\n"],"mappings":";;;;AAKA;AACA;AAAkD;AAAA;AAElDA,QAAQ,CAAC,uBAAuB,EAAE,YAAM;EACtCC,EAAE,CAAC,oCAAoC,EAAE,YAAM;IAC7C,IAAMC,UAAU,GAAG,KAAK;IACxB,IAAMC,GAAG,GAAG,IAAAC,8CAAqB,EAAC,QAAQ,EAAEF,UAAU,CAAC;IACvD,IAAMG,IAAI,GAAG,IAAAC,+BAAc,kCAAMH,GAAG;MAAEI,IAAI,EAAE;IAAY,GAAkB;IAC1EC,MAAM,CAACH,IAAI,CAACI,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC;IACzCF,MAAM,CAACH,IAAI,CAACE,IAAI,CAAC,CAACI,IAAI,CAAC,YAAY,CAAC;EACtC,CAAC,CAAC;EAEFV,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAMC,UAAU,GAAG,KAAK;IACxB,IAAMC,GAAG,GAAG,IAAAC,8CAAqB,EAAC,QAAQ,EAAEF,UAAU,CAAC;IACvD,IAAMG,IAAI,GAAG,IAAAC,+BAAc,kCAAMH,GAAG;MAAEI,IAAI,EAAE;IAAO,GAAkB;IACrEC,MAAM,CAACH,IAAI,CAACI,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC;IACzCF,MAAM,CAACH,IAAI,CAACE,IAAI,CAAC,CAACI,IAAI,CAAC,OAAO,CAAC;EACjC,CAAC,CAAC;EAEFV,EAAE,CAAC,0DAA0D,EAAE,YAAM;IACnE,IAAMW,sBAA8C,GAAG;MACrDC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXL,KAAK,EAAE,IAAI;MACXM,IAAI,EAAE,CAAC;MACPC,eAAe,EAAE,KAAK;MACtBC,MAAM,EAAE,EAAE;MACVC,6BAA6B,EAAE,EAAE;MACjCC,iBAAiB,EAAE,GAAG;MACtBC,aAAa,EAAE,KAAK;MACpBC,OAAO,EAAE,GAAG;MACZC,GAAG,EAAE,CAAC;IACR,CAAC;IACD,IAAMpB,UAAU,iCAAiC;IACjD,IAAMC,GAAG,GAAG,IAAAC,8CAAqB,EAAC,QAAQ,EAAEF,UAAU,EAAE,CACtDU,sBAAsB,CACvB,CAAC;IACFJ,MAAM,CAACL,GAAG,CAAC,CAACoB,eAAe,EAAE;IAC7B,IAAMlB,IAAI,GAAG,IAAAC,+BAAc,kCAAMH,GAAG;MAAEI,IAAI,EAAE;IAAO,IAAmB,CACpEK,sBAAsB,CACvB,CAAC;IACFJ,MAAM,CAACH,IAAI,CAACI,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC;IACxCF,MAAM,CAACH,IAAI,CAACE,IAAI,CAAC,CAACI,IAAI,CAAC,OAAO,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC,CAAC"}