{"version":3,"file":"describe_tier.js","names":["describeMultiValue","values","field","parameter","has_allowed_values","valueMap","keyBy","enumerations","joinOr","map","value","escapedValue","escapeParameterValue","label","addQuotes","match","_","is","length","describeIsItem","describeIsAnyValue","filterToStringMap","user_attribute","describeUserAttribute","anyvalue","describeTier","item","filterType","defaultTo","type"],"sources":["../../../../src/utils/tier/describe_tier.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ILookmlModelExploreField } from '@looker/sdk'\nimport defaultTo from 'lodash/defaultTo'\nimport keyBy from 'lodash/keyBy'\nimport type { FilterItemToStringMapType, FilterModel } from '../..'\nimport type { FilterExpressionType } from '../../types'\nimport { addQuotes } from '../string/add_quotes'\nimport { describeIsItem } from '../summary/describe_is_item'\nimport { describeIsAnyValue } from '../summary/describe_is_any_value'\nimport { joinOr } from '../summary/join_or'\nimport { describeUserAttribute } from '../user_attribute/describe_user_attribute'\nimport { escapeParameterValue } from './escape_parameter_value'\n\nconst describeMultiValue = (\n  values: string[],\n  field?: ILookmlModelExploreField | null\n) => {\n  if (values) {\n    if (field?.parameter && field?.has_allowed_values) {\n      // if it's a parameter field - lookup value in enumerations to get label\n      const valueMap = keyBy(field.enumerations, 'value')\n      return joinOr(\n        values.map((value) => {\n          // parameter values in enumeration are already escaped\n          // we escape here to match the enumeration values\n          const escapedValue = escapeParameterValue(value)\n          // if value is found in the enumeration list we return the label,\n          // otherwise we will use the value as label\n          return valueMap[escapedValue]?.label || value\n        })\n      )\n    }\n    return joinOr(values.map(addQuotes))\n  }\n  return ''\n}\n\nconst match = (\n  { is, value }: FilterModel,\n  _?: string,\n  field?: ILookmlModelExploreField | null\n) => {\n  return value && value.length\n    ? describeIsItem(is, describeMultiValue(value, field))\n    : describeIsAnyValue()\n}\n\nconst filterToStringMap: FilterItemToStringMapType = {\n  match,\n  user_attribute: describeUserAttribute,\n  anyvalue: describeIsAnyValue,\n}\n\n/**\n * Maps a FilterItem to a function for converting it to a filter summary\n */\nexport const describeTier = (\n  item: FilterModel,\n  filterType?: FilterExpressionType,\n  field?: ILookmlModelExploreField | null\n): string =>\n  defaultTo(filterToStringMap[item.type], () => '')(item, filterType, field)\n"],"mappings":";;;;;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,CACtBC,MAAgB,EAChBC,KAAuC,EACpC;EACH,IAAID,MAAM,EAAE;IACV,IAAIC,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEC,SAAS,IAAID,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEE,kBAAkB,EAAE;MAEjD,IAAMC,QAAQ,GAAG,IAAAC,iBAAK,EAACJ,KAAK,CAACK,YAAY,EAAE,OAAO,CAAC;MACnD,OAAO,IAAAC,eAAM,EACXP,MAAM,CAACQ,GAAG,CAAC,UAACC,KAAK,EAAK;QAAA;QAGpB,IAAMC,YAAY,GAAG,IAAAC,4CAAoB,EAACF,KAAK,CAAC;QAGhD,OAAO,0BAAAL,QAAQ,CAACM,YAAY,CAAC,0DAAtB,sBAAwBE,KAAK,KAAIH,KAAK;MAC/C,CAAC,CAAC,CACH;IACH;IACA,OAAO,IAAAF,eAAM,EAACP,MAAM,CAACQ,GAAG,CAACK,qBAAS,CAAC,CAAC;EACtC;EACA,OAAO,EAAE;AACX,CAAC;AAED,IAAMC,KAAK,GAAG,SAARA,KAAK,OAETC,CAAU,EACVd,KAAuC,EACpC;EAAA,IAHDe,EAAE,QAAFA,EAAE;IAAEP,KAAK,QAALA,KAAK;EAIX,OAAOA,KAAK,IAAIA,KAAK,CAACQ,MAAM,GACxB,IAAAC,gCAAc,EAACF,EAAE,EAAEjB,kBAAkB,CAACU,KAAK,EAAER,KAAK,CAAC,CAAC,GACpD,IAAAkB,yCAAkB,GAAE;AAC1B,CAAC;AAED,IAAMC,iBAA4C,GAAG;EACnDN,KAAK,EAALA,KAAK;EACLO,cAAc,EAAEC,8CAAqB;EACrCC,QAAQ,EAAEJ;AACZ,CAAC;;AAKM,IAAMK,YAAY,GAAG,SAAfA,YAAY,CACvBC,IAAiB,EACjBC,UAAiC,EACjCzB,KAAuC;EAAA,OAEvC,IAAA0B,qBAAS,EAACP,iBAAiB,CAACK,IAAI,CAACG,IAAI,CAAC,EAAE;IAAA,OAAM,EAAE;EAAA,EAAC,CAACH,IAAI,EAAEC,UAAU,EAAEzB,KAAK,CAAC;AAAA;AAAA"}