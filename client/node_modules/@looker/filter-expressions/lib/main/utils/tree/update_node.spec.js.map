{"version":3,"file":"update_node.spec.js","names":["describe","it","root","id","type","value","updateProps","ast","updateNode","expect","toEqual","left","right"],"sources":["../../../../src/utils/tree/update_node.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { updateNode } from './update_node'\n\ndescribe('update root', () => {\n  it('updates root nodes properties', () => {\n    const root = { id: 1, type: '=', value: [1] }\n    const updateProps = { value: [2] }\n    const ast = updateNode(root, 1, updateProps)\n    expect(ast.value).toEqual(updateProps.value)\n  })\n})\n\ndescribe('update root.left', () => {\n  it('updates root.left properties', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { type: '<' }\n    const ast = updateNode(root, 2, updateProps)\n    expect(ast.left?.type).toEqual(updateProps.type)\n    expect(ast.right).toEqual(root.right)\n  })\n})\n\ndescribe('update root.right', () => {\n  it('updates root.right properties with a type', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { type: '<' }\n    const ast = updateNode(root, 3, updateProps)\n    expect(ast.right?.type).toEqual(updateProps.type)\n    expect(ast.left).toEqual(root.left)\n  })\n\n  it('updates root.right properties with a value', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: {\n        id: 3,\n        type: ',',\n        left: { id: 4, type: '<', value: [5] },\n        right: { id: 5, type: '>', value: [10] },\n      },\n    }\n    const updateProps = { value: [10] }\n    const ast = updateNode(root, 3, updateProps)\n    expect(ast.right?.right?.value).toEqual(updateProps.value)\n    expect(ast.left).toEqual(root.left)\n    expect(ast.right?.left).toEqual(root.right.left)\n  })\n})\n\ndescribe('updating invalid node id', () => {\n  it('has no effect on root ast', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { value: [10] }\n    const ast = updateNode(root, 9, updateProps)\n    expect(ast).toEqual(root)\n  })\n})\n"],"mappings":";;AAIA;;AAEAA,QAAQ,CAAC,aAAa,EAAE,YAAM;EAC5BC,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAMC,IAAI,GAAG;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEC,KAAK,EAAE,CAAC,CAAC;IAAE,CAAC;IAC7C,IAAMC,WAAW,GAAG;MAAED,KAAK,EAAE,CAAC,CAAC;IAAE,CAAC;IAClC,IAAME,GAAG,GAAG,IAAAC,uBAAU,EAACN,IAAI,EAAE,CAAC,EAAEI,WAAW,CAAC;IAC5CG,MAAM,CAACF,GAAG,CAACF,KAAK,CAAC,CAACK,OAAO,CAACJ,WAAW,CAACD,KAAK,CAAC;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFL,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjCC,EAAE,CAAC,8BAA8B,EAAE,YAAM;IAAA;IACvC,IAAMC,IAAI,GAAG;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTO,IAAI,EAAE;QAAER,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE,CAAC;MACtCO,KAAK,EAAE;QAAET,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE;IACxC,CAAC;IACD,IAAMC,WAAW,GAAG;MAAEF,IAAI,EAAE;IAAI,CAAC;IACjC,IAAMG,GAAG,GAAG,IAAAC,uBAAU,EAACN,IAAI,EAAE,CAAC,EAAEI,WAAW,CAAC;IAC5CG,MAAM,cAACF,GAAG,CAACI,IAAI,8CAAR,UAAUP,IAAI,CAAC,CAACM,OAAO,CAACJ,WAAW,CAACF,IAAI,CAAC;IAChDK,MAAM,CAACF,GAAG,CAACK,KAAK,CAAC,CAACF,OAAO,CAACR,IAAI,CAACU,KAAK,CAAC;EACvC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFZ,QAAQ,CAAC,mBAAmB,EAAE,YAAM;EAClCC,EAAE,CAAC,2CAA2C,EAAE,YAAM;IAAA;IACpD,IAAMC,IAAI,GAAG;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTO,IAAI,EAAE;QAAER,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE,CAAC;MACtCO,KAAK,EAAE;QAAET,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE;IACxC,CAAC;IACD,IAAMC,WAAW,GAAG;MAAEF,IAAI,EAAE;IAAI,CAAC;IACjC,IAAMG,GAAG,GAAG,IAAAC,uBAAU,EAACN,IAAI,EAAE,CAAC,EAAEI,WAAW,CAAC;IAC5CG,MAAM,eAACF,GAAG,CAACK,KAAK,+CAAT,WAAWR,IAAI,CAAC,CAACM,OAAO,CAACJ,WAAW,CAACF,IAAI,CAAC;IACjDK,MAAM,CAACF,GAAG,CAACI,IAAI,CAAC,CAACD,OAAO,CAACR,IAAI,CAACS,IAAI,CAAC;EACrC,CAAC,CAAC;EAEFV,EAAE,CAAC,4CAA4C,EAAE,YAAM;IAAA;IACrD,IAAMC,IAAI,GAAG;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTO,IAAI,EAAE;QAAER,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE,CAAC;MACtCO,KAAK,EAAE;QACLT,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,GAAG;QACTO,IAAI,EAAE;UAAER,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,GAAG;UAAEC,KAAK,EAAE,CAAC,CAAC;QAAE,CAAC;QACtCO,KAAK,EAAE;UAAET,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE,GAAG;UAAEC,KAAK,EAAE,CAAC,EAAE;QAAE;MACzC;IACF,CAAC;IACD,IAAMC,WAAW,GAAG;MAAED,KAAK,EAAE,CAAC,EAAE;IAAE,CAAC;IACnC,IAAME,GAAG,GAAG,IAAAC,uBAAU,EAACN,IAAI,EAAE,CAAC,EAAEI,WAAW,CAAC;IAC5CG,MAAM,gBAACF,GAAG,CAACK,KAAK,qEAAT,YAAWA,KAAK,sDAAhB,kBAAkBP,KAAK,CAAC,CAACK,OAAO,CAACJ,WAAW,CAACD,KAAK,CAAC;IAC1DI,MAAM,CAACF,GAAG,CAACI,IAAI,CAAC,CAACD,OAAO,CAACR,IAAI,CAACS,IAAI,CAAC;IACnCF,MAAM,gBAACF,GAAG,CAACK,KAAK,gDAAT,YAAWD,IAAI,CAAC,CAACD,OAAO,CAACR,IAAI,CAACU,KAAK,CAACD,IAAI,CAAC;EAClD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFX,QAAQ,CAAC,0BAA0B,EAAE,YAAM;EACzCC,EAAE,CAAC,2BAA2B,EAAE,YAAM;IACpC,IAAMC,IAAI,GAAG;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTO,IAAI,EAAE;QAAER,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE,CAAC;MACtCO,KAAK,EAAE;QAAET,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC,CAAC;MAAE;IACxC,CAAC;IACD,IAAMC,WAAW,GAAG;MAAED,KAAK,EAAE,CAAC,EAAE;IAAE,CAAC;IACnC,IAAME,GAAG,GAAG,IAAAC,uBAAU,EAACN,IAAI,EAAE,CAAC,EAAEI,WAAW,CAAC;IAC5CG,MAAM,CAACF,GAAG,CAAC,CAACG,OAAO,CAACR,IAAI,CAAC;EAC3B,CAAC,CAAC;AACJ,CAAC,CAAC"}