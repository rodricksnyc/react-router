{"version":3,"file":"string_grammar.spec.js","names":["parseFilterExpression","i18nInit","stringGrammarTestItems","convertTypeToOption","stringFilterToString","summary","treeToList","filterType","testStringItem","testItem","test","expression","type","describe","output","ast","description","expect","toMatchSnapshot","list","item","itemType","toEqual","toBe","stringOutput","beforeEach","forEach","it","value","toHaveLength","toMatchInlineSnapshot"],"sources":["../../../src/grammars/string_grammar.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { parseFilterExpression } from '../utils'\nimport { i18nInit } from '../utils/i18n'\nimport type { GrammarTestItem } from './grammar_test_utils'\nimport { stringGrammarTestItems } from './string_grammar_test_expressions'\n\nimport { convertTypeToOption } from '../utils/option/convert_type_to_option'\nimport { stringFilterToString } from '../utils/string/string_filter_to_string'\nimport { summary } from '../utils/summary/summary'\nimport { treeToList } from '../utils/tree/tree_to_list'\n\nconst filterType = 'string'\nconst testStringItem = (testItem: GrammarTestItem) => {\n  test(`${testItem.expression}`, () => {\n    const { expression, type, describe, output } = testItem\n    const ast = parseFilterExpression(filterType, expression)\n    const description = summary({ type: filterType, expression })\n    expect(ast).toMatchSnapshot()\n    const list = treeToList(ast)\n    const item = list[0]\n\n    const itemType =\n      type === 'matchesAdvanced' ? item.type : convertTypeToOption(item)\n    expect(itemType).toEqual(type)\n\n    // test descriptions\n    expect(description).toBe(describe)\n\n    // test output\n    const stringOutput =\n      type === 'matchesAdvanced' ? expression : stringFilterToString(ast)\n    expect(stringOutput).toBe(output)\n  })\n}\n\ndescribe('String grammar can parse', () => {\n  beforeEach(() => i18nInit())\n  stringGrammarTestItems.forEach(testStringItem)\n})\n\ndescribe('String grammar can parse expanded character sets', () => {\n  it('can parse japanese characters', () => {\n    const expression = 'りんご,グレープ'\n    const ast = parseFilterExpression('string', expression)\n    const { type, value } = ast\n    expect(type).toBe('match')\n    expect(value).toHaveLength(2)\n    expect(value[0]).toBe('りんご')\n    expect(value[1]).toBe('グレープ')\n    expect(ast).toMatchInlineSnapshot(`\n      Object {\n        \"id\": 1,\n        \"is\": true,\n        \"left\": undefined,\n        \"right\": undefined,\n        \"type\": \"match\",\n        \"value\": Array [\n          \"りんご\",\n          \"グレープ\",\n        ],\n      }\n    `)\n  })\n})\n"],"mappings":";AAIA,SAASA,qBAAqB,QAAQ,UAAU;AAChD,SAASC,QAAQ,QAAQ,eAAe;AAExC,SAASC,sBAAsB,QAAQ,mCAAmC;AAE1E,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,OAAO,QAAQ,0BAA0B;AAClD,SAASC,UAAU,QAAQ,4BAA4B;AAEvD,MAAMC,UAAU,GAAG,QAAQ;AAC3B,MAAMC,cAAc,GAAIC,QAAyB,IAAK;EACpDC,IAAI,CAAE,GAAED,QAAQ,CAACE,UAAW,EAAC,EAAE,MAAM;IACnC,MAAM;MAAEA,UAAU;MAAEC,IAAI;MAAEC,QAAQ;MAAEC;IAAO,CAAC,GAAGL,QAAQ;IACvD,MAAMM,GAAG,GAAGf,qBAAqB,CAACO,UAAU,EAAEI,UAAU,CAAC;IACzD,MAAMK,WAAW,GAAGX,OAAO,CAAC;MAAEO,IAAI,EAAEL,UAAU;MAAEI;IAAW,CAAC,CAAC;IAC7DM,MAAM,CAACF,GAAG,CAAC,CAACG,eAAe,EAAE;IAC7B,MAAMC,IAAI,GAAGb,UAAU,CAACS,GAAG,CAAC;IAC5B,MAAMK,IAAI,GAAGD,IAAI,CAAC,CAAC,CAAC;IAEpB,MAAME,QAAQ,GACZT,IAAI,KAAK,iBAAiB,GAAGQ,IAAI,CAACR,IAAI,GAAGT,mBAAmB,CAACiB,IAAI,CAAC;IACpEH,MAAM,CAACI,QAAQ,CAAC,CAACC,OAAO,CAACV,IAAI,CAAC;;IAG9BK,MAAM,CAACD,WAAW,CAAC,CAACO,IAAI,CAACV,QAAQ,CAAC;;IAGlC,MAAMW,YAAY,GAChBZ,IAAI,KAAK,iBAAiB,GAAGD,UAAU,GAAGP,oBAAoB,CAACW,GAAG,CAAC;IACrEE,MAAM,CAACO,YAAY,CAAC,CAACD,IAAI,CAACT,MAAM,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC;AAEDD,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzCY,UAAU,CAAC,MAAMxB,QAAQ,EAAE,CAAC;EAC5BC,sBAAsB,CAACwB,OAAO,CAAClB,cAAc,CAAC;AAChD,CAAC,CAAC;AAEFK,QAAQ,CAAC,kDAAkD,EAAE,MAAM;EACjEc,EAAE,CAAC,+BAA+B,EAAE,MAAM;IACxC,MAAMhB,UAAU,GAAG,UAAU;IAC7B,MAAMI,GAAG,GAAGf,qBAAqB,CAAC,QAAQ,EAAEW,UAAU,CAAC;IACvD,MAAM;MAAEC,IAAI;MAAEgB;IAAM,CAAC,GAAGb,GAAG;IAC3BE,MAAM,CAACL,IAAI,CAAC,CAACW,IAAI,CAAC,OAAO,CAAC;IAC1BN,MAAM,CAACW,KAAK,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;IAC7BZ,MAAM,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,CAAC,KAAK,CAAC;IAC5BN,MAAM,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,CAAC,MAAM,CAAC;IAC7BN,MAAM,CAACF,GAAG,CAAC,CAACe,qBAAqB,CAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}