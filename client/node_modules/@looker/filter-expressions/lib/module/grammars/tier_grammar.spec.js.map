{"version":3,"file":"tier_grammar.spec.js","names":["convertTypeToOption","parseFilterExpression","summary","treeToList","i18nInit","tierFilterToString","tierGrammarTestItems","filterType","testStringItem","testItem","test","expression","type","describe","output","field","ast","description","expect","toMatchSnapshot","list","item","itemType","toEqual","toBe","stringOutput","beforeEach","forEach"],"sources":["../../../src/grammars/tier_grammar.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { GrammarTestItem } from '.'\nimport {\n  convertTypeToOption,\n  parseFilterExpression,\n  summary,\n  treeToList,\n} from '../utils'\nimport { i18nInit } from '../utils/i18n'\nimport { tierFilterToString } from '../utils/tier/tier_filter_to_string'\nimport { tierGrammarTestItems } from './tier_grammar_test_expressions'\n\nconst filterType = 'tier'\nconst testStringItem = (testItem: GrammarTestItem) => {\n  test(`${testItem.expression}`, () => {\n    const { expression, type, describe, output, field } = testItem\n    const ast = parseFilterExpression(filterType, expression)\n    const description = summary({ type: filterType, expression, field })\n    expect(ast).toMatchSnapshot()\n    const list = treeToList(ast)\n    const item = list[0]\n\n    const itemType =\n      type === 'matchesAdvanced' ? item.type : convertTypeToOption(item)\n    expect(itemType).toEqual(type)\n\n    // test descriptions\n    expect(description).toBe(describe)\n\n    // test output\n    const stringOutput =\n      type === 'matchesAdvanced'\n        ? expression\n        : tierFilterToString(ast, filterType, field)\n    expect(stringOutput).toBe(output)\n  })\n}\n\ndescribe('Tier grammar can parse', () => {\n  beforeEach(() => i18nInit())\n  tierGrammarTestItems.forEach(testStringItem)\n})\n"],"mappings":";;AAKA,SACEA,mBAAmB,EACnBC,qBAAqB,EACrBC,OAAO,EACPC,UAAU,QACL,UAAU;AACjB,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,kBAAkB,QAAQ,qCAAqC;AACxE,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE,MAAMC,UAAU,GAAG,MAAM;AACzB,MAAMC,cAAc,GAAIC,QAAyB,IAAK;EACpDC,IAAI,CAAE,GAAED,QAAQ,CAACE,UAAW,EAAC,EAAE,MAAM;IACnC,MAAM;MAAEA,UAAU;MAAEC,IAAI;MAAEC,QAAQ;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IAC9D,MAAMO,GAAG,GAAGf,qBAAqB,CAACM,UAAU,EAAEI,UAAU,CAAC;IACzD,MAAMM,WAAW,GAAGf,OAAO,CAAC;MAAEU,IAAI,EAAEL,UAAU;MAAEI,UAAU;MAAEI;IAAM,CAAC,CAAC;IACpEG,MAAM,CAACF,GAAG,CAAC,CAACG,eAAe,EAAE;IAC7B,MAAMC,IAAI,GAAGjB,UAAU,CAACa,GAAG,CAAC;IAC5B,MAAMK,IAAI,GAAGD,IAAI,CAAC,CAAC,CAAC;IAEpB,MAAME,QAAQ,GACZV,IAAI,KAAK,iBAAiB,GAAGS,IAAI,CAACT,IAAI,GAAGZ,mBAAmB,CAACqB,IAAI,CAAC;IACpEH,MAAM,CAACI,QAAQ,CAAC,CAACC,OAAO,CAACX,IAAI,CAAC;;IAG9BM,MAAM,CAACD,WAAW,CAAC,CAACO,IAAI,CAACX,QAAQ,CAAC;;IAGlC,MAAMY,YAAY,GAChBb,IAAI,KAAK,iBAAiB,GACtBD,UAAU,GACVN,kBAAkB,CAACW,GAAG,EAAET,UAAU,EAAEQ,KAAK,CAAC;IAChDG,MAAM,CAACO,YAAY,CAAC,CAACD,IAAI,CAACV,MAAM,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC;AAEDD,QAAQ,CAAC,wBAAwB,EAAE,MAAM;EACvCa,UAAU,CAAC,MAAMtB,QAAQ,EAAE,CAAC;EAC5BE,oBAAoB,CAACqB,OAAO,CAACnB,cAAc,CAAC;AAC9C,CAAC,CAAC"}