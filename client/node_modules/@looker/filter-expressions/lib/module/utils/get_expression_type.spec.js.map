{"version":3,"file":"get_expression_type.spec.js","names":["Category","getExpressionTypeFromField","describe","it","mockField","enumerations","label","value","expect","toEqual","is_numeric","is_timeframe","type","mockField1","mockField2","category","parameter"],"sources":["../../../src/utils/get_expression_type.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ILookmlModelExploreField } from '@looker/sdk'\nimport { Category } from '@looker/sdk'\nimport { getExpressionTypeFromField } from './get_expression_type'\n\ndescribe('getExpressionTypeFromField', () => {\n  it('should return \"tier\" if the field has enumerations', () => {\n    const mockField = {\n      enumerations: [\n        {\n          label: 'answer',\n          value: 42,\n        },\n      ],\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('tier')\n  })\n\n  it('should return \"number\" if the field is_numeric', () => {\n    const mockField = {\n      is_numeric: true,\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('number')\n  })\n\n  describe('is_timeframe', () => {\n    it('should return \"date\" if the field is_timeframe', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'field_type',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date')\n    })\n\n    it('should return \"date_time\" if the field is_timeframe, type is date_time', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'date_time',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date_time')\n    })\n\n    it('should return \"date_time\" if the field is_timeframe, type is date_hour', () => {\n      const mockField = {\n        is_timeframe: true,\n        type: 'date_hour',\n      } as ILookmlModelExploreField\n      expect(getExpressionTypeFromField(mockField)).toEqual('date_time')\n    })\n  })\n\n  it('should return \"location\" if the field is a \"location\" or \"location_bin_level\" type', () => {\n    const mockField1 = {\n      type: 'location',\n    } as ILookmlModelExploreField\n    const mockField2 = {\n      type: 'location_bin_level',\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField1)).toEqual('location')\n    expect(getExpressionTypeFromField(mockField2)).toEqual('location')\n  })\n\n  it('should return \"string\" by default', () => {\n    const mockField = {} as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('string')\n  })\n\n  it('should return number for number parameter (b/187940941, b/199507872)', () => {\n    const mockField = {\n      category: Category.parameter,\n      type: 'number',\n    } as ILookmlModelExploreField\n    expect(getExpressionTypeFromField(mockField)).toEqual('number')\n  })\n})\n"],"mappings":";;AAKA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,0BAA0B,QAAQ,uBAAuB;AAElEC,QAAQ,CAAC,4BAA4B,EAAE,MAAM;EAC3CC,EAAE,CAAC,oDAAoD,EAAE,MAAM;IAC7D,MAAMC,SAAS,GAAG;MAChBC,YAAY,EAAE,CACZ;QACEC,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE;MACT,CAAC;IAEL,CAA6B;IAC7BC,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,MAAM,CAAC;EAC/D,CAAC,CAAC;EAEFN,EAAE,CAAC,gDAAgD,EAAE,MAAM;IACzD,MAAMC,SAAS,GAAG;MAChBM,UAAU,EAAE;IACd,CAA6B;IAC7BF,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;EAEFP,QAAQ,CAAC,cAAc,EAAE,MAAM;IAC7BC,EAAE,CAAC,gDAAgD,EAAE,MAAM;MACzD,MAAMC,SAAS,GAAG;QAChBO,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BJ,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,MAAM,CAAC;IAC/D,CAAC,CAAC;IAEFN,EAAE,CAAC,wEAAwE,EAAE,MAAM;MACjF,MAAMC,SAAS,GAAG;QAChBO,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BJ,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,WAAW,CAAC;IACpE,CAAC,CAAC;IAEFN,EAAE,CAAC,wEAAwE,EAAE,MAAM;MACjF,MAAMC,SAAS,GAAG;QAChBO,YAAY,EAAE,IAAI;QAClBC,IAAI,EAAE;MACR,CAA6B;MAC7BJ,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,WAAW,CAAC;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFN,EAAE,CAAC,oFAAoF,EAAE,MAAM;IAC7F,MAAMU,UAAU,GAAG;MACjBD,IAAI,EAAE;IACR,CAA6B;IAC7B,MAAME,UAAU,GAAG;MACjBF,IAAI,EAAE;IACR,CAA6B;IAC7BJ,MAAM,CAACP,0BAA0B,CAACY,UAAU,CAAC,CAAC,CAACJ,OAAO,CAAC,UAAU,CAAC;IAClED,MAAM,CAACP,0BAA0B,CAACa,UAAU,CAAC,CAAC,CAACL,OAAO,CAAC,UAAU,CAAC;EACpE,CAAC,CAAC;EAEFN,EAAE,CAAC,mCAAmC,EAAE,MAAM;IAC5C,MAAMC,SAAS,GAAG,CAAC,CAA6B;IAChDI,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;EAEFN,EAAE,CAAC,sEAAsE,EAAE,MAAM;IAC/E,MAAMC,SAAS,GAAG;MAChBW,QAAQ,EAAEf,QAAQ,CAACgB,SAAS;MAC5BJ,IAAI,EAAE;IACR,CAA6B;IAC7BJ,MAAM,CAACP,0BAA0B,CAACG,SAAS,CAAC,CAAC,CAACK,OAAO,CAAC,QAAQ,CAAC;EACjE,CAAC,CAAC;AACJ,CAAC,CAAC"}