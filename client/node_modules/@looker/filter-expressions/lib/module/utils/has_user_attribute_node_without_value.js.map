{"version":3,"file":"has_user_attribute_node_without_value.js","names":["any","allPass","flow","TYPE_USER_ATTRIBUTE","treeToList","isUserAttributeNode","type","hasNoAttributeValue","attributeValue","hasUserAttributeNodeWithoutValue"],"sources":["../../../src/utils/has_user_attribute_node_without_value.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport any from 'lodash/fp/any'\nimport allPass from 'lodash/fp/allPass'\nimport flow from 'lodash/fp/flow'\nimport type { FilterModel } from '../types'\nimport { TYPE_USER_ATTRIBUTE } from '../types'\nimport { treeToList } from './tree'\n\nconst isUserAttributeNode = ({ type }: FilterModel) =>\n  type === TYPE_USER_ATTRIBUTE\n\nconst hasNoAttributeValue = ({ attributeValue }: FilterModel) => !attributeValue\n\n/**\n * checks if the ast has:\n * - any node of type 'userAttribute'\n * - and that node has no value\n */\nexport const hasUserAttributeNodeWithoutValue = flow([\n  treeToList,\n  any(allPass([isUserAttributeNode, hasNoAttributeValue])),\n])\n"],"mappings":";AAIA,OAAOA,GAAG,MAAM,eAAe;AAC/B,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,IAAI,MAAM,gBAAgB;AAEjC,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,UAAU,QAAQ,QAAQ;AAEnC,MAAMC,mBAAmB,GAAG,CAAC;EAAEC;AAAkB,CAAC,KAChDA,IAAI,KAAKH,mBAAmB;AAE9B,MAAMI,mBAAmB,GAAG,CAAC;EAAEC;AAA4B,CAAC,KAAK,CAACA,cAAc;;AAOhF,OAAO,MAAMC,gCAAgC,GAAGP,IAAI,CAAC,CACnDE,UAAU,EACVJ,GAAG,CAACC,OAAO,CAAC,CAACI,mBAAmB,EAAEE,mBAAmB,CAAC,CAAC,CAAC,CACzD,CAAC"}