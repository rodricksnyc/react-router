{"version":3,"file":"describe_number.spec.js","names":["numberExpressionTestItems","summary","i18nInit","describeNumber","describe","beforeEach","forEach","testItem","expression","it","description","type","expect","toBe","item","id","is"],"sources":["../../../../src/utils/number/describe_number.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { GrammarTestItem } from '../../grammars'\nimport { numberExpressionTestItems } from '../../grammars'\nimport { summary } from '../summary/summary'\nimport { i18nInit } from '../i18n'\nimport type { FilterModel } from '../../types'\nimport { describeNumber } from './describe_number'\n\ndescribe('Summary', () => {\n  beforeEach(() => i18nInit())\n\n  numberExpressionTestItems.forEach((testItem: GrammarTestItem) => {\n    const { expression, describe } = testItem\n\n    it('works for number expression ' + expression, () => {\n      const description = summary({ type: 'number', expression })\n      expect(description).toBe(describe)\n    })\n  })\n\n  it('is empty for an undefined value', () => {\n    const item: FilterModel = { id: '0', is: true, type: 'other' }\n    const description = describeNumber(item)\n    expect(description).toBe('')\n  })\n})\n"],"mappings":";;AAKA,SAASA,yBAAyB,QAAQ,gBAAgB;AAC1D,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,QAAQ,SAAS;AAElC,SAASC,cAAc,QAAQ,mBAAmB;AAElDC,QAAQ,CAAC,SAAS,EAAE,MAAM;EACxBC,UAAU,CAAC,MAAMH,QAAQ,EAAE,CAAC;EAE5BF,yBAAyB,CAACM,OAAO,CAAEC,QAAyB,IAAK;IAC/D,MAAM;MAAEC,UAAU;MAAEJ;IAAS,CAAC,GAAGG,QAAQ;IAEzCE,EAAE,CAAC,8BAA8B,GAAGD,UAAU,EAAE,MAAM;MACpD,MAAME,WAAW,GAAGT,OAAO,CAAC;QAAEU,IAAI,EAAE,QAAQ;QAAEH;MAAW,CAAC,CAAC;MAC3DI,MAAM,CAACF,WAAW,CAAC,CAACG,IAAI,CAACT,QAAQ,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFK,EAAE,CAAC,iCAAiC,EAAE,MAAM;IAC1C,MAAMK,IAAiB,GAAG;MAAEC,EAAE,EAAE,GAAG;MAAEC,EAAE,EAAE,IAAI;MAAEL,IAAI,EAAE;IAAQ,CAAC;IAC9D,MAAMD,WAAW,GAAGP,cAAc,CAACW,IAAI,CAAC;IACxCF,MAAM,CAACF,WAAW,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC,CAAC"}