{"version":3,"file":"number_to_string.js","names":["defaultTo","flow","isEmpty","partition","NumberTypes","treeToList","userAttributeToString","isNullUndefinedOrEmpty","nullToString","is","isToString","betweenToString","bounds","low","high","valueToString","type","value","map","v","join","yes","no","filterToStringMap","null","between","user_attribute","serializeNumberNode","item","toStringFunction","listToExpression","items","filter","String","removeEmptyItems","indexOf","addDuplicateNotNodeIfNeeded","list","orClauses","andClauses","length","EQUAL","every","numberToString"],"sources":["../../../../src/utils/number/number_to_string.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport defaultTo from 'lodash/defaultTo'\nimport flow from 'lodash/fp/flow'\nimport isEmpty from 'lodash/isEmpty'\nimport partition from 'lodash/partition'\nimport type {\n  FilterItemToStringFunction,\n  FilterItemToStringMapType,\n  FilterModel,\n  ValueProps,\n} from '../../types'\nimport { NumberTypes } from '../../types/number_types'\nimport { treeToList } from '../tree/tree_to_list'\nimport { userAttributeToString } from '../user_attribute/user_attribute_to_string'\nimport { isNullUndefinedOrEmpty } from './is_null_undefined_or_empty'\n\n/**\n * number_to_string.ts\n * A collection of util functions that convert FilterItemProps (value, between, null)\n * to their filter_expression representation.\n * A FilterItem of:           will convert to:\n * {\n *   \"is\": true,              \"1,2,3\"\n *   \"type\": \"=\",\n *   \"value\": Array [\n *     1,2,3\n *   ],\n * }\n */\n\nconst nullToString = ({ is }: FilterModel): string => `${isToString(is)}null`\n\n/**\n * Builds the expression of a 'between' range item\n * if both low & high values are null, undefined or empty\n * returns empty string which means 'any value'\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst betweenToString = ({ bounds, low, high, is }: any) =>\n  bounds && (!isNullUndefinedOrEmpty(low) || !isNullUndefinedOrEmpty(high))\n    ? `${isToString(is)}${bounds[0]}${defaultTo(low, '')},${defaultTo(\n        high,\n        ''\n      )}${bounds[1]}`\n    : ''\n\n/**\n * Builds the filter expression for an =, <, >, <=, >= item\n * if value[] is empty returns empty string which means 'any value'\n */\nconst valueToString = ({ is, type, value }: ValueProps) =>\n  value\n    ?.map<string>((v) => `${isToString(is)}${type === '=' ? '' : type}${v}`)\n    .join(',') || ''\n\n/**\n * Converts the 'is' value to string filter expression\n * 'is' is a prefix for the expresion value, blank for true and 'not ' for false\n */\nconst isToString = (is = true, yes = '', no = 'not ') => `${is ? yes : no}`\n\nconst filterToStringMap: FilterItemToStringMapType = {\n  null: nullToString,\n  between: betweenToString,\n  user_attribute: userAttributeToString,\n}\n\n/**\n * Maps a FilterItem to a function for converting it to an expression\n */\nexport const serializeNumberNode = (item: FilterModel): string => {\n  const toStringFunction: FilterItemToStringFunction =\n    filterToStringMap[item.type] || valueToString\n  return toStringFunction?.(item) || ''\n}\n\n/**\n * Converts a list of items into its number expression value\n */\nconst listToExpression = (items: FilterModel[]) =>\n  items.map(serializeNumberNode).filter(String).join(',')\n\n/**\n * itemIsNotEmpty is to filter out empty nodes when\n * building the number filter expression\n */\nconst removeEmptyItems = (items: FilterModel[]) =>\n  items.filter(\n    ({ type, value }) =>\n      !(['=', '>', '<', '>=', '<='].indexOf(type) > -1 && isEmpty(value))\n  )\n\n/**\n * Adds fix for an even weirder case of bad sql generation with literal number equality\n * combining with a single NOT condition.\n * need to duplicate the not condition '1, not 2' must become '1, not 2, not 2'\n */\nconst addDuplicateNotNodeIfNeeded = (list: FilterModel[]): FilterModel[] => {\n  // break up into OR and AND clauses\n  const [orClauses, andClauses] = partition(list, (item) => item.is)\n  // check for duplicate not condition\n  if (\n    andClauses.length === 1 &&\n    // exlude case when an 'is not equal' clause contains multiple values since those will produce multiple not clauses\n    !(\n      andClauses[0].type === NumberTypes.EQUAL &&\n      andClauses[0].value?.length > 1\n    ) &&\n    orClauses.length >= 1 &&\n    orClauses.every((item) => item.type === '=')\n  ) {\n    // duplicate the first not (AND) clause\n    return [...orClauses, ...andClauses, andClauses[0]]\n  }\n  return list\n}\n\n/**\n * Converts the AST to an array of FilterItems and then\n * converts each item into its expression representation\n */\nexport const numberToString = flow(\n  treeToList,\n  removeEmptyItems,\n  addDuplicateNotNodeIfNeeded,\n  listToExpression\n)\n"],"mappings":"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"}