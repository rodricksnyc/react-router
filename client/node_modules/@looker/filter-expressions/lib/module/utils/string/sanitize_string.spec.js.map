{"version":3,"file":"sanitize_string.spec.js","names":["parseFilterExpression","sanitizeString","describe","it","expression","ast","item","type","expect","value","toMatchObject","toBe","userAttributeWithValue","name","label","rank","value_is_hidden","source","hidden_value_domain_whitelist","user_attribute_id","user_can_edit","user_id","can","toMatchSnapshot"],"sources":["../../../../src/utils/string/sanitize_string.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { UserAttributeWithValue, FilterModel } from '../../types'\nimport { parseFilterExpression } from '../parse_filter_expression'\nimport { sanitizeString } from './sanitize_string'\n\ndescribe('Sanitize String tests', () => {\n  it('works when switching to startsWith', () => {\n    const expression = 'foo'\n    const ast = parseFilterExpression('string', expression)\n    const item = sanitizeString({ ...ast, type: 'startsWith' } as FilterModel)\n    expect(item.value).toMatchObject(['foo'])\n    expect(item.type).toBe('startsWith')\n  })\n\n  it('works when switching to match', () => {\n    const expression = 'foo'\n    const ast = parseFilterExpression('string', expression)\n    const item = sanitizeString({ ...ast, type: 'match' } as FilterModel)\n    expect(item.value).toMatchObject(['foo'])\n    expect(item.type).toBe('match')\n  })\n\n  it('replaces the userAttribute value when switching to match', () => {\n    const userAttributeWithValue: UserAttributeWithValue = {\n      name: 'id',\n      label: 'id',\n      value: 'ua',\n      rank: 0,\n      value_is_hidden: false,\n      source: '',\n      hidden_value_domain_whitelist: '',\n      user_attribute_id: '1',\n      user_can_edit: false,\n      user_id: '1',\n      can: {},\n    }\n    const expression = `{{ _user_attributes['id'] }}`\n    const ast = parseFilterExpression('string', expression, [\n      userAttributeWithValue,\n    ])\n    expect(ast).toMatchSnapshot()\n    const item = sanitizeString({ ...ast, type: 'match' } as FilterModel, [\n      userAttributeWithValue,\n    ])\n    expect(item.value).toMatchObject(['ua'])\n    expect(item.type).toBe('match')\n  })\n})\n"],"mappings":";;;;AAKA,SAASA,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,cAAc,QAAQ,mBAAmB;AAElDC,QAAQ,CAAC,uBAAuB,EAAE,MAAM;EACtCC,EAAE,CAAC,oCAAoC,EAAE,MAAM;IAC7C,MAAMC,UAAU,GAAG,KAAK;IACxB,MAAMC,GAAG,GAAGL,qBAAqB,CAAC,QAAQ,EAAEI,UAAU,CAAC;IACvD,MAAME,IAAI,GAAGL,cAAc,iCAAMI,GAAG;MAAEE,IAAI,EAAE;IAAY,GAAkB;IAC1EC,MAAM,CAACF,IAAI,CAACG,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC;IACzCF,MAAM,CAACF,IAAI,CAACC,IAAI,CAAC,CAACI,IAAI,CAAC,YAAY,CAAC;EACtC,CAAC,CAAC;EAEFR,EAAE,CAAC,+BAA+B,EAAE,MAAM;IACxC,MAAMC,UAAU,GAAG,KAAK;IACxB,MAAMC,GAAG,GAAGL,qBAAqB,CAAC,QAAQ,EAAEI,UAAU,CAAC;IACvD,MAAME,IAAI,GAAGL,cAAc,iCAAMI,GAAG;MAAEE,IAAI,EAAE;IAAO,GAAkB;IACrEC,MAAM,CAACF,IAAI,CAACG,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC;IACzCF,MAAM,CAACF,IAAI,CAACC,IAAI,CAAC,CAACI,IAAI,CAAC,OAAO,CAAC;EACjC,CAAC,CAAC;EAEFR,EAAE,CAAC,0DAA0D,EAAE,MAAM;IACnE,MAAMS,sBAA8C,GAAG;MACrDC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXL,KAAK,EAAE,IAAI;MACXM,IAAI,EAAE,CAAC;MACPC,eAAe,EAAE,KAAK;MACtBC,MAAM,EAAE,EAAE;MACVC,6BAA6B,EAAE,EAAE;MACjCC,iBAAiB,EAAE,GAAG;MACtBC,aAAa,EAAE,KAAK;MACpBC,OAAO,EAAE,GAAG;MACZC,GAAG,EAAE,CAAC;IACR,CAAC;IACD,MAAMlB,UAAU,GAAI,8BAA6B;IACjD,MAAMC,GAAG,GAAGL,qBAAqB,CAAC,QAAQ,EAAEI,UAAU,EAAE,CACtDQ,sBAAsB,CACvB,CAAC;IACFJ,MAAM,CAACH,GAAG,CAAC,CAACkB,eAAe,EAAE;IAC7B,MAAMjB,IAAI,GAAGL,cAAc,iCAAMI,GAAG;MAAEE,IAAI,EAAE;IAAO,IAAmB,CACpEK,sBAAsB,CACvB,CAAC;IACFJ,MAAM,CAACF,IAAI,CAACG,KAAK,CAAC,CAACC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC;IACxCF,MAAM,CAACF,IAAI,CAACC,IAAI,CAAC,CAACI,IAAI,CAAC,OAAO,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC,CAAC"}