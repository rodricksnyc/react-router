{"version":3,"file":"describe_tier.js","names":["defaultTo","keyBy","addQuotes","describeIsItem","describeIsAnyValue","joinOr","describeUserAttribute","escapeParameterValue","describeMultiValue","values","field","parameter","has_allowed_values","valueMap","enumerations","map","value","escapedValue","label","match","is","_","length","filterToStringMap","user_attribute","anyvalue","describeTier","item","filterType","type"],"sources":["../../../../src/utils/tier/describe_tier.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ILookmlModelExploreField } from '@looker/sdk'\nimport defaultTo from 'lodash/defaultTo'\nimport keyBy from 'lodash/keyBy'\nimport type { FilterItemToStringMapType, FilterModel } from '../..'\nimport type { FilterExpressionType } from '../../types'\nimport { addQuotes } from '../string/add_quotes'\nimport { describeIsItem } from '../summary/describe_is_item'\nimport { describeIsAnyValue } from '../summary/describe_is_any_value'\nimport { joinOr } from '../summary/join_or'\nimport { describeUserAttribute } from '../user_attribute/describe_user_attribute'\nimport { escapeParameterValue } from './escape_parameter_value'\n\nconst describeMultiValue = (\n  values: string[],\n  field?: ILookmlModelExploreField | null\n) => {\n  if (values) {\n    if (field?.parameter && field?.has_allowed_values) {\n      // if it's a parameter field - lookup value in enumerations to get label\n      const valueMap = keyBy(field.enumerations, 'value')\n      return joinOr(\n        values.map((value) => {\n          // parameter values in enumeration are already escaped\n          // we escape here to match the enumeration values\n          const escapedValue = escapeParameterValue(value)\n          // if value is found in the enumeration list we return the label,\n          // otherwise we will use the value as label\n          return valueMap[escapedValue]?.label || value\n        })\n      )\n    }\n    return joinOr(values.map(addQuotes))\n  }\n  return ''\n}\n\nconst match = (\n  { is, value }: FilterModel,\n  _?: string,\n  field?: ILookmlModelExploreField | null\n) => {\n  return value && value.length\n    ? describeIsItem(is, describeMultiValue(value, field))\n    : describeIsAnyValue()\n}\n\nconst filterToStringMap: FilterItemToStringMapType = {\n  match,\n  user_attribute: describeUserAttribute,\n  anyvalue: describeIsAnyValue,\n}\n\n/**\n * Maps a FilterItem to a function for converting it to a filter summary\n */\nexport const describeTier = (\n  item: FilterModel,\n  filterType?: FilterExpressionType,\n  field?: ILookmlModelExploreField | null\n): string =>\n  defaultTo(filterToStringMap[item.type], () => '')(item, filterType, field)\n"],"mappings":";;AAKA,OAAOA,SAAS,MAAM,kBAAkB;AACxC,OAAOC,KAAK,MAAM,cAAc;AAGhC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,qBAAqB,QAAQ,2CAA2C;AACjF,SAASC,oBAAoB,QAAQ,0BAA0B;AAE/D,MAAMC,kBAAkB,GAAG,CACzBC,MAAgB,EAChBC,KAAuC,KACpC;EACH,IAAID,MAAM,EAAE;IACV,IAAIC,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEC,SAAS,IAAID,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEE,kBAAkB,EAAE;MAEjD,MAAMC,QAAQ,GAAGZ,KAAK,CAACS,KAAK,CAACI,YAAY,EAAE,OAAO,CAAC;MACnD,OAAOT,MAAM,CACXI,MAAM,CAACM,GAAG,CAAEC,KAAK,IAAK;QAAA;QAGpB,MAAMC,YAAY,GAAGV,oBAAoB,CAACS,KAAK,CAAC;QAGhD,OAAO,0BAAAH,QAAQ,CAACI,YAAY,CAAC,0DAAtB,sBAAwBC,KAAK,KAAIF,KAAK;MAC/C,CAAC,CAAC,CACH;IACH;IACA,OAAOX,MAAM,CAACI,MAAM,CAACM,GAAG,CAACb,SAAS,CAAC,CAAC;EACtC;EACA,OAAO,EAAE;AACX,CAAC;AAED,MAAMiB,KAAK,GAAG,CACZ;EAAEC,EAAE;EAAEJ;AAAmB,CAAC,EAC1BK,CAAU,EACVX,KAAuC,KACpC;EACH,OAAOM,KAAK,IAAIA,KAAK,CAACM,MAAM,GACxBnB,cAAc,CAACiB,EAAE,EAAEZ,kBAAkB,CAACQ,KAAK,EAAEN,KAAK,CAAC,CAAC,GACpDN,kBAAkB,EAAE;AAC1B,CAAC;AAED,MAAMmB,iBAA4C,GAAG;EACnDJ,KAAK;EACLK,cAAc,EAAElB,qBAAqB;EACrCmB,QAAQ,EAAErB;AACZ,CAAC;;AAKD,OAAO,MAAMsB,YAAY,GAAG,CAC1BC,IAAiB,EACjBC,UAAiC,EACjClB,KAAuC,KAEvCV,SAAS,CAACuB,iBAAiB,CAACI,IAAI,CAACE,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAACF,IAAI,EAAEC,UAAU,EAAElB,KAAK,CAAC"}