{"version":3,"file":"tier_filter_to_string.js","names":["flow","quoteFilter","isItemToString","userAttributeToString","escapeParameterValue","treeToList","matchToString","value","is","_","field","map","val","has_allowed_values","parameter","join","anyvalueToString","filterToStringMap","anyvalue","match","user_attribute","serializeTierItem","type","item","toStringFunction","listToExpression","items","tierFilterToString","root"],"sources":["../../../../src/utils/tier/tier_filter_to_string.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ILookmlModelExploreField } from '@looker/sdk'\nimport flow from 'lodash/fp/flow'\nimport type {\n  FilterASTNode,\n  FilterExpressionType,\n  FilterItemToStringFunction,\n  FilterItemToStringMapType,\n  FilterModel,\n} from '../..'\nimport { quoteFilter } from '../string/quote_filter'\nimport isItemToString from '../to_string/is_item_to_string'\nimport { userAttributeToString } from '../user_attribute/user_attribute_to_string'\nimport { escapeParameterValue } from './escape_parameter_value'\nimport { treeToList } from '../tree/tree_to_list'\n\nconst matchToString = (\n  { value, is }: FilterModel,\n  _?: string,\n  field?: ILookmlModelExploreField | null\n) => {\n  return (\n    isItemToString(is, '', '-') +\n    value\n      .map((val: string) =>\n        field?.has_allowed_values && field?.parameter\n          ? escapeParameterValue(val)\n          : quoteFilter(val)\n      )\n      .join(`,${isItemToString(is, '', '-')}`)\n  )\n}\n\nconst anyvalueToString = () => ''\n\nconst filterToStringMap: FilterItemToStringMapType = {\n  anyvalue: anyvalueToString,\n  match: matchToString,\n  user_attribute: userAttributeToString,\n}\n\nconst serializeTierItem =\n  (type: FilterExpressionType, field?: ILookmlModelExploreField) =>\n  (item: FilterModel): string => {\n    const toStringFunction: FilterItemToStringFunction =\n      filterToStringMap[item.type]\n    return toStringFunction?.(item, type, field) || ''\n  }\n/**\n * Maps a FilterItem to a function for converting it to an expression\n */\n\nconst listToExpression =\n  (type: FilterExpressionType, field?: ILookmlModelExploreField) =>\n  (items: FilterModel[]) =>\n    items.map(serializeTierItem(type, field)).join(',')\n\n/**\n * Converts the AST to an array of FilterItems and then\n * converts each item into its expression representation\n */\nexport const tierFilterToString = (\n  root: FilterASTNode,\n  type: FilterExpressionType,\n  field?: ILookmlModelExploreField\n): string => flow(treeToList, listToExpression(type, field))(root)\n"],"mappings":";;AAKA,OAAOA,IAAI,MAAM,gBAAgB;AAQjC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,SAASC,qBAAqB,QAAQ,4CAA4C;AAClF,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,aAAa,GAAG,CACpB;EAAEC,KAAK;EAAEC;AAAgB,CAAC,EAC1BC,CAAU,EACVC,KAAuC,KACpC;EACH,OACER,cAAc,CAACM,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,GAC3BD,KAAK,CACFI,GAAG,CAAEC,GAAW,IACfF,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEG,kBAAkB,IAAIH,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEI,SAAS,GACzCV,oBAAoB,CAACQ,GAAG,CAAC,GACzBX,WAAW,CAACW,GAAG,CAAC,CACrB,CACAG,IAAI,CAAE,IAAGb,cAAc,CAACM,EAAE,EAAE,EAAE,EAAE,GAAG,CAAE,EAAC,CAAC;AAE9C,CAAC;AAED,MAAMQ,gBAAgB,GAAG,MAAM,EAAE;AAEjC,MAAMC,iBAA4C,GAAG;EACnDC,QAAQ,EAAEF,gBAAgB;EAC1BG,KAAK,EAAEb,aAAa;EACpBc,cAAc,EAAEjB;AAClB,CAAC;AAED,MAAMkB,iBAAiB,GACrB,CAACC,IAA0B,EAAEZ,KAAgC,KAC5Da,IAAiB,IAAa;EAC7B,MAAMC,gBAA4C,GAChDP,iBAAiB,CAACM,IAAI,CAACD,IAAI,CAAC;EAC9B,OAAO,CAAAE,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAGD,IAAI,EAAED,IAAI,EAAEZ,KAAK,CAAC,KAAI,EAAE;AACpD,CAAC;;AAKH,MAAMe,gBAAgB,GACpB,CAACH,IAA0B,EAAEZ,KAAgC,KAC5DgB,KAAoB,IACnBA,KAAK,CAACf,GAAG,CAACU,iBAAiB,CAACC,IAAI,EAAEZ,KAAK,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;;AAMvD,OAAO,MAAMY,kBAAkB,GAAG,CAChCC,IAAmB,EACnBN,IAA0B,EAC1BZ,KAAgC,KACrBV,IAAI,CAACK,UAAU,EAAEoB,gBAAgB,CAACH,IAAI,EAAEZ,KAAK,CAAC,CAAC,CAACkB,IAAI,CAAC"}