{"version":3,"file":"add_node.js","names":["applyId","addNode","root","newNode","workingRoot","right","newRoot","type","left","parent","pointer"],"sources":["../../../../src/utils/tree/add_node.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { FilterASTNode } from '../../types'\nimport applyId from '../transform/utils/apply_id_to_ast'\n\n/**\n * Adds a new node to the current ast and returns the root node\n */\nexport const addNode = (root: FilterASTNode, newNode: FilterASTNode) => {\n  const workingRoot: FilterASTNode = root\n  if (!workingRoot.right) {\n    // root is a single node\n    const newRoot: FilterASTNode = {\n      type: ',',\n      left: workingRoot,\n      right: newNode,\n    }\n    return applyId(newRoot)\n  }\n\n  let parent = workingRoot\n  let pointer = workingRoot\n  while (pointer.right) {\n    parent = pointer\n    pointer = pointer.right\n  }\n\n  parent.right = { type: ',', left: pointer, right: newNode }\n  return applyId(workingRoot)\n}\n"],"mappings":";;AAKA,OAAOA,OAAO,MAAM,oCAAoC;;AAKxD,OAAO,MAAMC,OAAO,GAAG,CAACC,IAAmB,EAAEC,OAAsB,KAAK;EACtE,MAAMC,WAA0B,GAAGF,IAAI;EACvC,IAAI,CAACE,WAAW,CAACC,KAAK,EAAE;IAEtB,MAAMC,OAAsB,GAAG;MAC7BC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAEJ,WAAW;MACjBC,KAAK,EAAEF;IACT,CAAC;IACD,OAAOH,OAAO,CAACM,OAAO,CAAC;EACzB;EAEA,IAAIG,MAAM,GAAGL,WAAW;EACxB,IAAIM,OAAO,GAAGN,WAAW;EACzB,OAAOM,OAAO,CAACL,KAAK,EAAE;IACpBI,MAAM,GAAGC,OAAO;IAChBA,OAAO,GAAGA,OAAO,CAACL,KAAK;EACzB;EAEAI,MAAM,CAACJ,KAAK,GAAG;IAAEE,IAAI,EAAE,GAAG;IAAEC,IAAI,EAAEE,OAAO;IAAEL,KAAK,EAAEF;EAAQ,CAAC;EAC3D,OAAOH,OAAO,CAACI,WAAW,CAAC;AAC7B,CAAC"}