{"version":3,"file":"tree_to_list.js","names":["inorderTraversal","treeToList","root","orItems","andItems","node","item","type","is","push"],"sources":["../../../../src/utils/tree/tree_to_list.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { FilterASTNode, FilterModel } from '../../types'\nimport { inorderTraversal } from './inorder_traversal'\n\n/**\n * Convert a FilterAST to a list of FilterASTNodes using in order traversal (left, node, right)\n *    (root(1))      ->  [0,1,2,3,4]\n *    /      \\\n * left(0)   right(3)\n *           /     \\\n *      left(2)     right(4)\n */\nexport const treeToList = (root: FilterASTNode): FilterModel[] => {\n  const orItems: FilterModel[] = []\n  const andItems: FilterModel[] = []\n  inorderTraversal(root, (node: FilterASTNode) => {\n    const item = node as FilterModel\n    if (item.type !== ',') {\n      ;(item.is ? orItems : andItems).push(item)\n    }\n  })\n  return [...orItems, ...andItems]\n}\n"],"mappings":";;AAKA,SAASA,gBAAgB,QAAQ,qBAAqB;;AAUtD,OAAO,MAAMC,UAAU,GAAIC,IAAmB,IAAoB;EAChE,MAAMC,OAAsB,GAAG,EAAE;EACjC,MAAMC,QAAuB,GAAG,EAAE;EAClCJ,gBAAgB,CAACE,IAAI,EAAGG,IAAmB,IAAK;IAC9C,MAAMC,IAAI,GAAGD,IAAmB;IAChC,IAAIC,IAAI,CAACC,IAAI,KAAK,GAAG,EAAE;MACrB;MAAC,CAACD,IAAI,CAACE,EAAE,GAAGL,OAAO,GAAGC,QAAQ,EAAEK,IAAI,CAACH,IAAI,CAAC;IAC5C;EACF,CAAC,CAAC;EACF,OAAO,CAAC,GAAGH,OAAO,EAAE,GAAGC,QAAQ,CAAC;AAClC,CAAC"}