{"version":3,"file":"update_node.spec.js","names":["updateNode","describe","it","root","id","type","value","updateProps","ast","expect","toEqual","left","right"],"sources":["../../../../src/utils/tree/update_node.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { updateNode } from './update_node'\n\ndescribe('update root', () => {\n  it('updates root nodes properties', () => {\n    const root = { id: 1, type: '=', value: [1] }\n    const updateProps = { value: [2] }\n    const ast = updateNode(root, 1, updateProps)\n    expect(ast.value).toEqual(updateProps.value)\n  })\n})\n\ndescribe('update root.left', () => {\n  it('updates root.left properties', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { type: '<' }\n    const ast = updateNode(root, 2, updateProps)\n    expect(ast.left?.type).toEqual(updateProps.type)\n    expect(ast.right).toEqual(root.right)\n  })\n})\n\ndescribe('update root.right', () => {\n  it('updates root.right properties with a type', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { type: '<' }\n    const ast = updateNode(root, 3, updateProps)\n    expect(ast.right?.type).toEqual(updateProps.type)\n    expect(ast.left).toEqual(root.left)\n  })\n\n  it('updates root.right properties with a value', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: {\n        id: 3,\n        type: ',',\n        left: { id: 4, type: '<', value: [5] },\n        right: { id: 5, type: '>', value: [10] },\n      },\n    }\n    const updateProps = { value: [10] }\n    const ast = updateNode(root, 3, updateProps)\n    expect(ast.right?.right?.value).toEqual(updateProps.value)\n    expect(ast.left).toEqual(root.left)\n    expect(ast.right?.left).toEqual(root.right.left)\n  })\n})\n\ndescribe('updating invalid node id', () => {\n  it('has no effect on root ast', () => {\n    const root = {\n      id: 1,\n      type: ',',\n      left: { id: 2, type: '=', value: [1] },\n      right: { id: 3, type: '>', value: [5] },\n    }\n    const updateProps = { value: [10] }\n    const ast = updateNode(root, 9, updateProps)\n    expect(ast).toEqual(root)\n  })\n})\n"],"mappings":"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"}