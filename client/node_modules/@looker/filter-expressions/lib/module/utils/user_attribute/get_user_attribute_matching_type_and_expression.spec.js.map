{"version":3,"file":"get_user_attribute_matching_type_and_expression.spec.js","names":["parseFilterExpression","getUserAttributeMatchingTypeAndExpression","jest","mock","describe","userAttributeName","ast","attributeName","beforeEach","mockReturnValue","it","expect","toBeNull","anotherUserAttribute","name","userAttribute","toBe"],"sources":["../../../../src/utils/user_attribute/get_user_attribute_matching_type_and_expression.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { parseFilterExpression } from '../parse_filter_expression'\nimport type { FilterASTNode, UserAttributeWithValue } from '../../types'\nimport { getUserAttributeMatchingTypeAndExpression } from './get_user_attribute_matching_type_and_expression'\n\njest.mock('../parse_filter_expression')\n\ndescribe('getUserAttributeMatchingTypeAndExpression', () => {\n  const userAttributeName = 'ua-name'\n  const ast = {\n    attributeName: userAttributeName,\n  } as FilterASTNode\n\n  beforeEach(() => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ;(parseFilterExpression as jest.Mock<any>).mockReturnValue(ast)\n  })\n\n  describe('when there are no user attributes', () => {\n    it('should return null', () => {\n      expect(\n        getUserAttributeMatchingTypeAndExpression('string', 'expr')\n      ).toBeNull()\n      expect(\n        getUserAttributeMatchingTypeAndExpression('string', 'expr', [])\n      ).toBeNull()\n    })\n  })\n\n  describe('when the user attribute is not found', () => {\n    const anotherUserAttribute = {\n      name: 'ua-name-2',\n    } as UserAttributeWithValue\n\n    it('should return null', () => {\n      expect(\n        getUserAttributeMatchingTypeAndExpression('string', 'expr', [\n          anotherUserAttribute,\n        ])\n      ).toBeNull()\n    })\n  })\n\n  describe('when the user attribute is found', () => {\n    const userAttribute = {\n      name: userAttributeName,\n    } as UserAttributeWithValue\n\n    it('should return it', () => {\n      expect(\n        getUserAttributeMatchingTypeAndExpression('string', 'expr', [\n          userAttribute,\n        ])\n      ).toBe(userAttribute)\n    })\n  })\n})\n"],"mappings":";AAIA,SAASA,qBAAqB,QAAQ,4BAA4B;AAElE,SAASC,yCAAyC,QAAQ,mDAAmD;AAE7GC,IAAI,CAACC,IAAI,CAAC,4BAA4B,CAAC;AAEvCC,QAAQ,CAAC,2CAA2C,EAAE,MAAM;EAC1D,MAAMC,iBAAiB,GAAG,SAAS;EACnC,MAAMC,GAAG,GAAG;IACVC,aAAa,EAAEF;EACjB,CAAkB;EAElBG,UAAU,CAAC,MAAM;IAEf;IAAER,qBAAqB,CAAoBS,eAAe,CAACH,GAAG,CAAC;EACjE,CAAC,CAAC;EAEFF,QAAQ,CAAC,mCAAmC,EAAE,MAAM;IAClDM,EAAE,CAAC,oBAAoB,EAAE,MAAM;MAC7BC,MAAM,CACJV,yCAAyC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAC5D,CAACW,QAAQ,EAAE;MACZD,MAAM,CACJV,yCAAyC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,CAAC,CAChE,CAACW,QAAQ,EAAE;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFR,QAAQ,CAAC,sCAAsC,EAAE,MAAM;IACrD,MAAMS,oBAAoB,GAAG;MAC3BC,IAAI,EAAE;IACR,CAA2B;IAE3BJ,EAAE,CAAC,oBAAoB,EAAE,MAAM;MAC7BC,MAAM,CACJV,yCAAyC,CAAC,QAAQ,EAAE,MAAM,EAAE,CAC1DY,oBAAoB,CACrB,CAAC,CACH,CAACD,QAAQ,EAAE;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFR,QAAQ,CAAC,kCAAkC,EAAE,MAAM;IACjD,MAAMW,aAAa,GAAG;MACpBD,IAAI,EAAET;IACR,CAA2B;IAE3BK,EAAE,CAAC,kBAAkB,EAAE,MAAM;MAC3BC,MAAM,CACJV,yCAAyC,CAAC,QAAQ,EAAE,MAAM,EAAE,CAC1Dc,aAAa,CACd,CAAC,CACH,CAACC,IAAI,CAACD,aAAa,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}