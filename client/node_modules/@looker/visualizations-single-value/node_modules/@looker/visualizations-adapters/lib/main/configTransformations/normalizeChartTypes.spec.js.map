{"version":3,"file":"normalizeChartTypes.spec.js","names":["describe","test","config","type","normalizeChartTypes","data","mockSdkDataResponse","fields","mockFields","transformedConfig","expect","toEqual","undefined"],"sources":["../../../src/configTransformations/normalizeChartTypes.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { normalizeChartTypes } from './normalizeChartTypes'\nimport { mockFields, mockSdkDataResponse } from '../fixtures'\n\ndescribe('normalizeChartTypes', () => {\n  describe('config.type ===', () => {\n    test('default', () => {\n      const config = { type: 'default' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('default')\n    })\n\n    test('area', () => {\n      const config = { type: 'area' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('area')\n    })\n\n    test('bar', () => {\n      const config = { type: 'bar' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('bar')\n    })\n\n    test('column', () => {\n      const config = { type: 'column' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('column')\n    })\n\n    test('line', () => {\n      const config = { type: 'line' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('line')\n    })\n\n    test('pie', () => {\n      const config = { type: 'pie' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('pie')\n    })\n\n    test('scatter', () => {\n      const config = { type: 'scatter' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('scatter')\n    })\n\n    test('sparkline', () => {\n      const config = { type: 'sparkline' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('sparkline')\n    })\n\n    test('table', () => {\n      const config = { type: 'table' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('table')\n    })\n\n    test('looker_area', () => {\n      const config = { type: 'looker_area' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('area')\n    })\n\n    test('looker_bar', () => {\n      const config = { type: 'looker_bar' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('bar')\n    })\n\n    test('looker_column', () => {\n      const config = { type: 'looker_column' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('column')\n    })\n\n    test('looker_line', () => {\n      const config = { type: 'looker_line' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('line')\n    })\n\n    test('looker_pie', () => {\n      const config = { type: 'looker_pie' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('pie')\n    })\n\n    test('looker_scatter', () => {\n      const config = { type: 'looker_scatter' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('scatter')\n    })\n\n    test('looker_grid', () => {\n      const config = { type: 'looker_grid' as const }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('table')\n    })\n\n    test('undefined', () => {\n      const config = { type: undefined as unknown as 'default' }\n      const { config: transformedConfig } = normalizeChartTypes({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      expect(transformedConfig.type).toEqual('default')\n    })\n  })\n\n  test('config.type is an unknown type', () => {\n    const config = { type: 'gouda-cheese-chart' as 'default' }\n    const { config: transformedConfig } = normalizeChartTypes({\n      config,\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n    expect(transformedConfig.type).toEqual('gouda-cheese-chart')\n  })\n})\n"],"mappings":"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"}