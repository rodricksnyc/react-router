{"version":3,"file":"buildChartConfig.spec.js","names":["describe","it","lineConfig","buildChartConfig","config","type","expect","toEqual","barConfig","scatterConfig","defaults_version","undefined","series","color","label","data","mockData","fields","mockFields","line_width","shape","style","value_format","visible","positioning"],"sources":["../../../src/utils/buildChartConfig.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { buildChartConfig } from './buildChartConfig'\nimport { mockFields, mockData } from '../fixtures'\n\ndescribe('buildChartConfig', () => {\n  it('normalizes chart type strings', () => {\n    const lineConfig = buildChartConfig({\n      config: { type: 'looker_line' },\n    })\n\n    expect(lineConfig.type).toEqual('line')\n\n    const barConfig = buildChartConfig({\n      config: { type: 'looker_bar' },\n    })\n\n    expect(barConfig.type).toEqual('bar')\n\n    const scatterConfig = buildChartConfig({\n      config: { type: 'looker_scatter' },\n    })\n\n    expect(scatterConfig.type).toEqual('scatter')\n  })\n\n  it('removes unsupported config values from final output', () => {\n    const config = buildChartConfig({\n      config: { defaults_version: 2 },\n    })\n\n    expect(config.defaults_version).toEqual(undefined)\n  })\n\n  it('passes through deeply nested user overrides', () => {\n    const config = buildChartConfig({\n      config: {\n        type: 'line',\n        series: { 'orders.count': { color: '#FF5733', label: 'TEST LABEL' } },\n      },\n      data: mockData,\n      fields: mockFields,\n    })\n\n    expect(config.series['orders.count']).toEqual({\n      color: '#FF5733',\n      label: 'TEST LABEL',\n      line_width: 3,\n      shape: 'circle',\n      style: 'filled',\n      value_format: '0,0.[00]',\n      visible: true,\n    })\n  })\n\n  it('sets bar default values', () => {\n    const config = buildChartConfig({\n      config: { type: 'bar' },\n      data: mockData,\n      fields: mockFields,\n    })\n\n    expect(config.positioning).toEqual('grouped')\n  })\n})\n"],"mappings":";;AAKA;AACA;;AAEAA,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjCC,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAMC,UAAU,GAAG,IAAAC,kCAAgB,EAAC;MAClCC,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAc;IAChC,CAAC,CAAC;IAEFC,MAAM,CAACJ,UAAU,CAACG,IAAI,CAAC,CAACE,OAAO,CAAC,MAAM,CAAC;IAEvC,IAAMC,SAAS,GAAG,IAAAL,kCAAgB,EAAC;MACjCC,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAa;IAC/B,CAAC,CAAC;IAEFC,MAAM,CAACE,SAAS,CAACH,IAAI,CAAC,CAACE,OAAO,CAAC,KAAK,CAAC;IAErC,IAAME,aAAa,GAAG,IAAAN,kCAAgB,EAAC;MACrCC,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAiB;IACnC,CAAC,CAAC;IAEFC,MAAM,CAACG,aAAa,CAACJ,IAAI,CAAC,CAACE,OAAO,CAAC,SAAS,CAAC;EAC/C,CAAC,CAAC;EAEFN,EAAE,CAAC,qDAAqD,EAAE,YAAM;IAC9D,IAAMG,MAAM,GAAG,IAAAD,kCAAgB,EAAC;MAC9BC,MAAM,EAAE;QAAEM,gBAAgB,EAAE;MAAE;IAChC,CAAC,CAAC;IAEFJ,MAAM,CAACF,MAAM,CAACM,gBAAgB,CAAC,CAACH,OAAO,CAACI,SAAS,CAAC;EACpD,CAAC,CAAC;EAEFV,EAAE,CAAC,6CAA6C,EAAE,YAAM;IACtD,IAAMG,MAAM,GAAG,IAAAD,kCAAgB,EAAC;MAC9BC,MAAM,EAAE;QACNC,IAAI,EAAE,MAAM;QACZO,MAAM,EAAE;UAAE,cAAc,EAAE;YAAEC,KAAK,EAAE,SAAS;YAAEC,KAAK,EAAE;UAAa;QAAE;MACtE,CAAC;MACDC,IAAI,EAAEC,kBAAQ;MACdC,MAAM,EAAEC;IACV,CAAC,CAAC;IAEFZ,MAAM,CAACF,MAAM,CAACQ,MAAM,CAAC,cAAc,CAAC,CAAC,CAACL,OAAO,CAAC;MAC5CM,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,YAAY;MACnBK,UAAU,EAAE,CAAC;MACbC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,QAAQ;MACfC,YAAY,EAAE,UAAU;MACxBC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFtB,EAAE,CAAC,yBAAyB,EAAE,YAAM;IAClC,IAAMG,MAAM,GAAG,IAAAD,kCAAgB,EAAC;MAC9BC,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAM,CAAC;MACvBU,IAAI,EAAEC,kBAAQ;MACdC,MAAM,EAAEC;IACV,CAAC,CAAC;IAEFZ,MAAM,CAACF,MAAM,CAACoB,WAAW,CAAC,CAACjB,OAAO,CAAC,SAAS,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC,CAAC"}