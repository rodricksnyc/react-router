{"version":3,"file":"buildPivotFields.spec.js","names":["describe","it","transformedFields","buildPivotFields","fields","mockFields","pivots","mockPivots","pivotMeasures","measures","expect","length","toBe","ordersCountComplete","find","pivotMeasure","name","label","label_short","not","toBeUndefined","ordersAveragePending","pivoted_label"],"sources":["../../../src/utils/buildPivotFields.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { buildPivotFields } from './buildPivotFields'\nimport { mockFields, mockPivots } from '../fixtures'\n\ndescribe('buildPivotFields', () => {\n  it('creates pivot measure objects for each measure and pivot value pairing', () => {\n    const transformedFields = buildPivotFields({\n      fields: mockFields,\n      pivots: mockPivots,\n    })\n\n    const { measures: pivotMeasures } = transformedFields\n\n    // 2 measures * 3 pivot values\n    expect(pivotMeasures.length).toBe(6)\n\n    // Check for orders.count - pivot complete object\n    const ordersCountComplete = pivotMeasures.find(\n      (pivotMeasure) => pivotMeasure.name === 'complete - orders.count'\n    ) || { label: 'faux_label', label_short: 'faux_label_short' }\n\n    expect(ordersCountComplete).not.toBeUndefined()\n    expect(ordersCountComplete.label_short).toBe('Complete')\n    expect(ordersCountComplete.label).toBe('Orders Count')\n\n    // Check for orders.average_total_amount_of_order_usd - pivot pending object\n    const ordersAveragePending = pivotMeasures.find(\n      (pivotMeasure) =>\n        pivotMeasure.name ===\n        'pending - orders.average_total_amount_of_order_usd'\n    ) || { label: 'faux_label', label_short: 'faux_label_short' }\n    expect(ordersAveragePending).not.toBeUndefined()\n    expect(ordersAveragePending.label_short).toBe('Pending')\n    expect(ordersAveragePending.label).toBe(\n      'Orders Average Total Amount of Order USD'\n    )\n  })\n\n  it('adds a pivoted_label property to measure field objects', () => {\n    const { measures } = buildPivotFields({\n      fields: mockFields,\n      pivots: mockPivots,\n    })\n\n    // Check for orders.count - pivot complete object\n    const ordersCountComplete = measures.find(\n      (pivotMeasure) => pivotMeasure.name === 'complete - orders.count'\n    ) || {\n      label: 'faux_label',\n      label_short: 'faux_label_short',\n      pivoted_label: 'faux_pivoted_label',\n    }\n\n    expect(ordersCountComplete.pivoted_label).toBe('Orders Count: Complete')\n  })\n})\n"],"mappings":";;AAKA;AACA;;AAEAA,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjCC,EAAE,CAAC,wEAAwE,EAAE,YAAM;IACjF,IAAMC,iBAAiB,GAAG,IAAAC,mCAAgB,EAAC;MACzCC,MAAM,EAAEC,oBAAU;MAClBC,MAAM,EAAEC;IACV,CAAC,CAAC;IAEF,IAAkBC,aAAa,GAAKN,iBAAiB,CAA7CO,QAAQ;;IAGhBC,MAAM,CAACF,aAAa,CAACG,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;;IAGpC,IAAMC,mBAAmB,GAAGL,aAAa,CAACM,IAAI,CAC5C,UAACC,YAAY;MAAA,OAAKA,YAAY,CAACC,IAAI,KAAK,yBAAyB;IAAA,EAClE,IAAI;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE;IAAmB,CAAC;IAE7DR,MAAM,CAACG,mBAAmB,CAAC,CAACM,GAAG,CAACC,aAAa,EAAE;IAC/CV,MAAM,CAACG,mBAAmB,CAACK,WAAW,CAAC,CAACN,IAAI,CAAC,UAAU,CAAC;IACxDF,MAAM,CAACG,mBAAmB,CAACI,KAAK,CAAC,CAACL,IAAI,CAAC,cAAc,CAAC;;IAGtD,IAAMS,oBAAoB,GAAGb,aAAa,CAACM,IAAI,CAC7C,UAACC,YAAY;MAAA,OACXA,YAAY,CAACC,IAAI,KACjB,oDAAoD;IAAA,EACvD,IAAI;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE;IAAmB,CAAC;IAC7DR,MAAM,CAACW,oBAAoB,CAAC,CAACF,GAAG,CAACC,aAAa,EAAE;IAChDV,MAAM,CAACW,oBAAoB,CAACH,WAAW,CAAC,CAACN,IAAI,CAAC,SAAS,CAAC;IACxDF,MAAM,CAACW,oBAAoB,CAACJ,KAAK,CAAC,CAACL,IAAI,CACrC,0CAA0C,CAC3C;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,wDAAwD,EAAE,YAAM;IACjE,wBAAqB,IAAAE,mCAAgB,EAAC;QACpCC,MAAM,EAAEC,oBAAU;QAClBC,MAAM,EAAEC;MACV,CAAC,CAAC;MAHME,QAAQ,qBAARA,QAAQ;;IAMhB,IAAMI,mBAAmB,GAAGJ,QAAQ,CAACK,IAAI,CACvC,UAACC,YAAY;MAAA,OAAKA,YAAY,CAACC,IAAI,KAAK,yBAAyB;IAAA,EAClE,IAAI;MACHC,KAAK,EAAE,YAAY;MACnBC,WAAW,EAAE,kBAAkB;MAC/BI,aAAa,EAAE;IACjB,CAAC;IAEDZ,MAAM,CAACG,mBAAmB,CAACS,aAAa,CAAC,CAACV,IAAI,CAAC,wBAAwB,CAAC;EAC1E,CAAC,CAAC;AACJ,CAAC,CAAC"}