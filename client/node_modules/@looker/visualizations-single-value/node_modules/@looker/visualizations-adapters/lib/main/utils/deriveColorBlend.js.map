{"version":3,"file":"deriveColorBlend.js","names":["fallbackVal","v1","v2","isNaN","deriveColorBlend","baseColor","DEFAULT_SERIES_COLORS","targetColor","steps","colorStops","Math","max","baseHSV","hsv","targetHSV","baseHue","h","targetHue","baseSat","s","targetSat","baseVal","v","targetVal","hPerStep","sPerStep","vPerStep","Array","fill","map","_","i","hex"],"sources":["../../../src/utils/deriveColorBlend.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { hsv } from 'd3-hsv'\nimport { DEFAULT_SERIES_COLORS } from '.'\n\n/**\n * Utility for selecting base value, fallback value, or default value.\n * @param v1 base value\n * @param v2 fallback value\n * @returns\n *    v1 when base value is a valid number\n *    v2 when base value is NaN and fallback value is a valid number\n *    defaults to 0 when base and fallback values are NaN\n */\nconst fallbackVal = (v1: number, v2: number): number => {\n  if (isNaN(v1)) {\n    return fallbackVal(v2, 0)\n  }\n\n  return v1\n}\n\n/**\n * Utility mixes to colors together in a provided amount of steps\n * @param baseColor initial color (hex code)\n * @param targetColor color (hex code) to blend with baseColor\n * @param steps how many color stops to blend from base to target color\n * @returns an array of hex codes\n */\nexport const deriveColorBlend = (\n  baseColor: string = DEFAULT_SERIES_COLORS[0],\n  targetColor: string = DEFAULT_SERIES_COLORS[1],\n  steps = 5\n) => {\n  const colorStops = Math.max(steps - 1, 1) // use Math.max to prevent division by 0 errors\n\n  const baseHSV = hsv(baseColor)\n  const targetHSV = hsv(targetColor)\n\n  const baseHue = fallbackVal(baseHSV.h, targetHSV.h)\n  const targetHue = fallbackVal(targetHSV.h, baseHSV.h)\n\n  const baseSat = fallbackVal(baseHSV.s, targetHSV.s)\n  const targetSat = fallbackVal(targetHSV.s, baseHSV.s)\n\n  const { v: baseVal } = baseHSV\n  const { v: targetVal } = targetHSV\n\n  const hPerStep = (targetHue - baseHue) / colorStops\n  const sPerStep = (targetSat - baseSat) / colorStops\n  const vPerStep = (targetVal - baseVal) / colorStops\n\n  return new Array(steps).fill('').map((_, i) => {\n    return hsv(\n      baseHue + hPerStep * i,\n      baseSat + sPerStep * i,\n      baseVal + vPerStep * i\n    ).hex()\n  })\n}\n"],"mappings":";;;;;;AAIA;AACA;;AAWA,IAAMA,WAAW,GAAG,SAAdA,WAAW,CAAIC,EAAU,EAAEC,EAAU,EAAa;EACtD,IAAIC,KAAK,CAACF,EAAE,CAAC,EAAE;IACb,OAAOD,WAAW,CAACE,EAAE,EAAE,CAAC,CAAC;EAC3B;EAEA,OAAOD,EAAE;AACX,CAAC;;AASM,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgB,GAIxB;EAAA,IAHHC,SAAiB,uEAAGC,wBAAqB,CAAC,CAAC,CAAC;EAAA,IAC5CC,WAAmB,uEAAGD,wBAAqB,CAAC,CAAC,CAAC;EAAA,IAC9CE,KAAK,uEAAG,CAAC;EAET,IAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;;EAEzC,IAAMI,OAAO,GAAG,IAAAC,UAAG,EAACR,SAAS,CAAC;EAC9B,IAAMS,SAAS,GAAG,IAAAD,UAAG,EAACN,WAAW,CAAC;EAElC,IAAMQ,OAAO,GAAGf,WAAW,CAACY,OAAO,CAACI,CAAC,EAAEF,SAAS,CAACE,CAAC,CAAC;EACnD,IAAMC,SAAS,GAAGjB,WAAW,CAACc,SAAS,CAACE,CAAC,EAAEJ,OAAO,CAACI,CAAC,CAAC;EAErD,IAAME,OAAO,GAAGlB,WAAW,CAACY,OAAO,CAACO,CAAC,EAAEL,SAAS,CAACK,CAAC,CAAC;EACnD,IAAMC,SAAS,GAAGpB,WAAW,CAACc,SAAS,CAACK,CAAC,EAAEP,OAAO,CAACO,CAAC,CAAC;EAErD,IAAWE,OAAO,GAAKT,OAAO,CAAtBU,CAAC;EACT,IAAWC,SAAS,GAAKT,SAAS,CAA1BQ,CAAC;EAET,IAAME,QAAQ,GAAG,CAACP,SAAS,GAAGF,OAAO,IAAIN,UAAU;EACnD,IAAMgB,QAAQ,GAAG,CAACL,SAAS,GAAGF,OAAO,IAAIT,UAAU;EACnD,IAAMiB,QAAQ,GAAG,CAACH,SAAS,GAAGF,OAAO,IAAIZ,UAAU;EAEnD,OAAO,IAAIkB,KAAK,CAACnB,KAAK,CAAC,CAACoB,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IAC7C,OAAO,IAAAlB,UAAG,EACRE,OAAO,GAAGS,QAAQ,GAAGO,CAAC,EACtBb,OAAO,GAAGO,QAAQ,GAAGM,CAAC,EACtBV,OAAO,GAAGK,QAAQ,GAAGK,CAAC,CACvB,CAACC,GAAG,EAAE;EACT,CAAC,CAAC;AACJ,CAAC;AAAA"}