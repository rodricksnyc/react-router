{"version":3,"file":"formatTotals.js","names":["isTotalsValue","obj","has","formatTotals","totals","entries","Object","forEach","key","value","innerKey","innerObj","measureName","buildPivotMeasureName","pivotValue"],"sources":["../../../src/utils/formatTotals.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Totals, TotalsValue, ValueOf } from '../types'\nimport { buildPivotMeasureName } from './buildPivotMeasureName'\nimport has from 'lodash/has'\n\nconst isTotalsValue = (obj: ValueOf<Totals>): obj is TotalsValue => {\n  return has(obj, 'value')\n}\n\nexport const formatTotals = (totals: Totals = {}) => {\n  const entries: Record<string, ValueOf<TotalsValue>> = {}\n  Object.entries(totals).forEach(([key, obj]) => {\n    if (isTotalsValue(obj)) {\n      entries[key] = obj.value\n    } else {\n      Object.entries(obj).forEach(([innerKey, innerObj]) => {\n        const measureName = buildPivotMeasureName({\n          measureName: key,\n          pivotValue: innerKey,\n        })\n        entries[measureName] = innerObj.value\n      })\n    }\n  })\n\n  return entries\n}\n"],"mappings":";;;;;;;;AAMA;AACA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAa,CAAIC,GAAoB,EAAyB;EAClE,OAAO,IAAAC,eAAG,EAACD,GAAG,EAAE,OAAO,CAAC;AAC1B,CAAC;AAEM,IAAME,YAAY,GAAG,SAAfA,YAAY,GAA4B;EAAA,IAAxBC,MAAc,uEAAG,CAAC,CAAC;EAC9C,IAAMC,OAA6C,GAAG,CAAC,CAAC;EACxDC,MAAM,CAACD,OAAO,CAACD,MAAM,CAAC,CAACG,OAAO,CAAC,gBAAgB;IAAA;MAAdC,GAAG;MAAEP,GAAG;IACvC,IAAID,aAAa,CAACC,GAAG,CAAC,EAAE;MACtBI,OAAO,CAACG,GAAG,CAAC,GAAGP,GAAG,CAACQ,KAAK;IAC1B,CAAC,MAAM;MACLH,MAAM,CAACD,OAAO,CAACJ,GAAG,CAAC,CAACM,OAAO,CAAC,iBAA0B;QAAA;UAAxBG,QAAQ;UAAEC,QAAQ;QAC9C,IAAMC,WAAW,GAAG,IAAAC,4CAAqB,EAAC;UACxCD,WAAW,EAAEJ,GAAG;UAChBM,UAAU,EAAEJ;QACd,CAAC,CAAC;QACFL,OAAO,CAACO,WAAW,CAAC,GAAGD,QAAQ,CAACF,KAAK;MACvC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAAA"}