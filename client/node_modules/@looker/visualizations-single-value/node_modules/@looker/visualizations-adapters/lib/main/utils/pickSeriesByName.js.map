{"version":3,"file":"pickSeriesByName.js","names":["pickSeriesByName","fields","config","key","seriesList","series","isArray","seriesIndex","findIndex","measures","name"],"sources":["../../../src/utils/pickSeriesByName.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type {\n  CCartesian,\n  CSeriesBasic,\n  CSeriesPoints,\n  CSeriesLine,\n  CSeriesSize,\n  Fields,\n} from '../types'\nimport findIndex from 'lodash/findIndex'\nimport isArray from 'lodash/isArray'\n\ntype AllSeriesAttributes = Partial<\n  CSeriesBasic & CSeriesPoints & CSeriesLine & CSeriesSize\n>\n\n/**\n * A utility function made necessary by the reality that series can be\n * an array list or a key/value object.\n *\n * Returns a series that matches with the name provided in `key`\n *\n * @param fields standard fields object returned by SDK\n * @param config vis config object\n * @param key the string name we are searching for\n * @returns\n */\n\nexport const pickSeriesByName = (\n  fields: Fields,\n  config: CCartesian,\n  key: string\n): AllSeriesAttributes => {\n  const { series: seriesList } = config\n  if (isArray(seriesList)) {\n    // Array series! Pick the series that correlates with where it appears in the Fields list.\n    const seriesIndex = findIndex(fields.measures, {\n      name: key,\n    })\n\n    return seriesList[seriesIndex]\n  } else {\n    // Key/Value object: return the series at name `key`\n    return seriesList?.[key] || {}\n  }\n}\n"],"mappings":";;;;;;;AAYA;AACA;;AAkBO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BC,MAAc,EACdC,MAAkB,EAClBC,GAAW,EACa;EACxB,IAAgBC,UAAU,GAAKF,MAAM,CAA7BG,MAAM;EACd,IAAI,IAAAC,mBAAO,EAACF,UAAU,CAAC,EAAE;IAEvB,IAAMG,WAAW,GAAG,IAAAC,qBAAS,EAACP,MAAM,CAACQ,QAAQ,EAAE;MAC7CC,IAAI,EAAEP;IACR,CAAC,CAAC;IAEF,OAAOC,UAAU,CAACG,WAAW,CAAC;EAChC,CAAC,MAAM;IAEL,OAAO,CAAAH,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGD,GAAG,CAAC,KAAI,CAAC,CAAC;EAChC;AACF,CAAC;AAAA"}