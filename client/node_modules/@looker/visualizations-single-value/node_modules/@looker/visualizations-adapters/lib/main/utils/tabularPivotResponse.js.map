{"version":3,"file":"tabularPivotResponse.js","names":["tabularPivotResponse","data","fields","pivots","map","datum","formattedDatum","dimensionNames","getDimensionNames","forEach","dimensionName","value","measureNames","getMeasureNames","measureName","pivotValues","pivot","key","pivotValue","buildPivotMeasureName"],"sources":["../../../src/utils/tabularPivotResponse.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { buildPivotMeasureName, getDimensionNames, getMeasureNames } from '.'\nimport type { Fields, Pivots, SDKRecord } from '../types'\n\n/**\n * Flattens a pivot query data response from the Looker API into an array of\n * 1-layer, tabularized data objects.\n *\n * Context: Measures look different in pivot queries where their values aren't\n * 1-level deep objects with \"value\" properties. Instead, they're objects\n * with keys reflective of a the pivot fields' values. We need to use the\n * pivots metadata from the query response to determine what those keys are\n * and then transform the values.\n */\nexport const tabularPivotResponse = ({\n  data,\n  fields,\n  pivots,\n}: {\n  data: SDKRecord[]\n  fields: Fields\n  pivots: Pivots\n}) =>\n  data.map((datum) => {\n    const formattedDatum: SDKRecord = {}\n\n    const dimensionNames = getDimensionNames(fields)\n\n    dimensionNames.forEach(\n      (dimensionName) =>\n        (formattedDatum[dimensionName] =\n          datum[dimensionName] && datum[dimensionName].value)\n    )\n\n    const measureNames = getMeasureNames(fields)\n    measureNames.forEach((measureName) => {\n      const pivotValues = pivots.map((pivot) => pivot.key)\n      pivotValues.forEach((pivotValue) => {\n        formattedDatum[buildPivotMeasureName({ measureName, pivotValue })] =\n          datum[measureName] && datum[measureName][pivotValue].value\n      })\n    })\n\n    return formattedDatum\n  })\n"],"mappings":";;;;;;AAIA;;AAaO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAoB;EAAA,IAC/BC,IAAI,QAAJA,IAAI;IACJC,MAAM,QAANA,MAAM;IACNC,MAAM,QAANA,MAAM;EAAA,OAMNF,IAAI,CAACG,GAAG,CAAC,UAACC,KAAK,EAAK;IAClB,IAAMC,cAAyB,GAAG,CAAC,CAAC;IAEpC,IAAMC,cAAc,GAAG,IAAAC,mBAAiB,EAACN,MAAM,CAAC;IAEhDK,cAAc,CAACE,OAAO,CACpB,UAACC,aAAa;MAAA,OACXJ,cAAc,CAACI,aAAa,CAAC,GAC5BL,KAAK,CAACK,aAAa,CAAC,IAAIL,KAAK,CAACK,aAAa,CAAC,CAACC,KAAK;IAAA,CAAC,CACxD;IAED,IAAMC,YAAY,GAAG,IAAAC,iBAAe,EAACX,MAAM,CAAC;IAC5CU,YAAY,CAACH,OAAO,CAAC,UAACK,WAAW,EAAK;MACpC,IAAMC,WAAW,GAAGZ,MAAM,CAACC,GAAG,CAAC,UAACY,KAAK;QAAA,OAAKA,KAAK,CAACC,GAAG;MAAA,EAAC;MACpDF,WAAW,CAACN,OAAO,CAAC,UAACS,UAAU,EAAK;QAClCZ,cAAc,CAAC,IAAAa,uBAAqB,EAAC;UAAEL,WAAW,EAAXA,WAAW;UAAEI,UAAU,EAAVA;QAAW,CAAC,CAAC,CAAC,GAChEb,KAAK,CAACS,WAAW,CAAC,IAAIT,KAAK,CAACS,WAAW,CAAC,CAACI,UAAU,CAAC,CAACP,KAAK;MAC9D,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOL,cAAc;EACvB,CAAC,CAAC;AAAA;AAAA"}