{"version":3,"file":"legendValue.spec.js","names":["legendValue","mockPieConfig","mockFields","mockSdkDataResponse","describe","test","config","data","fields","expect","legend","toEqual","position","type","value","label_type","undefined","transformedConfig"],"sources":["../../../src/configTransformations/legendValue.spec.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { legendValue } from './legendValue'\nimport { mockPieConfig, mockFields, mockSdkDataResponse } from '../fixtures'\n\ndescribe('legendValue', () => {\n  test('default value', () => {\n    const { config } = legendValue({\n      config: { ...mockPieConfig },\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n\n    expect(config.legend).toEqual({\n      position: 'bottom',\n      type: 'legend',\n      value: 'label',\n    })\n  })\n\n  describe('config.label_type ===', () => {\n    test('lab', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'lab' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('labVal', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labVal' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('val', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'val' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('per', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'per' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('labPer', () => {\n      const config = {\n        ...mockPieConfig,\n        label_type: 'labPer' as const,\n        legend: undefined,\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  describe('config.legend.value ===', () => {\n    test('\"label\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'label' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label')\n      }\n    })\n\n    test('\"value\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'value' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('value')\n      }\n    })\n\n    test('\"percent\"', () => {\n      const config = { ...mockPieConfig, legend: { value: 'percent' as const } }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('percent')\n      }\n    })\n\n    test('\"label_value\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_value' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_value')\n      }\n    })\n\n    test('\"label_percent\"', () => {\n      const config = {\n        ...mockPieConfig,\n        legend: { value: 'label_percent' as const },\n      }\n      const { config: transformedConfig } = legendValue({\n        config,\n        data: mockSdkDataResponse,\n        fields: mockFields,\n      })\n      if (transformedConfig.legend) {\n        expect(transformedConfig.legend.value).toEqual('label_percent')\n      }\n    })\n  })\n\n  test('config.legend === false', () => {\n    const config = { ...mockPieConfig, legend: false }\n    const { config: transformedConfig } = legendValue({\n      config,\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n    expect(transformedConfig.legend).toEqual(false)\n  })\n})\n"],"mappings":"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"}