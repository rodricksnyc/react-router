{"version":3,"file":"seriesCellVis.js","names":["get","setSeriesCellVisStatus","config","measureName","i","cellVisDefault","seriesBaseName","split","apiValue","seriesCellVis","data","fields","series","restConfig","buildArraySeries","s","arraySeries","measures","map","name","defaultSeriesCellValue","cell_visualization","restSeries","buildNamedSeries","namedSeries","reduce","seriesConfig","Array","isArray"],"sources":["../../../src/configTransformations/seriesCellVis.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport get from 'lodash/get'\nimport type { CTable, CTableSeries } from '../adapters'\nimport type { ConfigHelper, ConfigHelperArgs } from '../types'\n\ntype ApiConfigWithOverrides = ConfigHelperArgs<CTable>['config']\n\nconst setSeriesCellVisStatus = (\n  config: ApiConfigWithOverrides,\n  measureName = '',\n  i: number\n) => {\n  const cellVisDefault = i === 0\n  const seriesBaseName = measureName.split('|')[0] // isolated value relevant to pivoted queries\n  const apiValue = get(\n    config,\n    ['series_cell_visualizations', seriesBaseName, 'is_active'],\n    cellVisDefault\n  )\n  return apiValue\n}\n\nexport const seriesCellVis: ConfigHelper<CTable> = ({\n  config,\n  data,\n  fields,\n}) => {\n  const { series = {}, ...restConfig } = config\n\n  const buildArraySeries = (s: CTableSeries[] = []) => {\n    const arraySeries = fields?.measures.map(({ name }, i) => {\n      const defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i)\n      const { cell_visualization = defaultSeriesCellValue, ...restSeries } =\n        s?.[i] || {}\n      return { cell_visualization, ...restSeries }\n    }, [])\n    return arraySeries\n  }\n\n  const buildNamedSeries = (s: { [k: string]: CTableSeries } = {}) => {\n    const namedSeries = fields.measures.reduce(\n      (seriesConfig, { name }, i) => {\n        const defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i)\n        const { cell_visualization = defaultSeriesCellValue, ...restSeries } =\n          s?.[name] || {}\n        return {\n          ...seriesConfig,\n          [name]: { cell_visualization, ...restSeries },\n        }\n      },\n\n      {}\n    )\n    return namedSeries\n  }\n\n  return {\n    config: {\n      series: Array.isArray(series)\n        ? buildArraySeries(series)\n        : buildNamedSeries(series),\n      ...restConfig,\n    },\n    data,\n    fields,\n  }\n}\n"],"mappings":";;;;;;;;AAKA,OAAOA,GAAG,MAAM,YAAY;AAM5B,MAAMC,sBAAsB,GAAG,CAC7BC,MAA8B,EAC9BC,WAAW,GAAG,EAAE,EAChBC,CAAS,KACN;EACH,MAAMC,cAAc,GAAGD,CAAC,KAAK,CAAC;EAC9B,MAAME,cAAc,GAAGH,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAChD,MAAMC,QAAQ,GAAGR,GAAG,CAClBE,MAAM,EACN,CAAC,4BAA4B,EAAEI,cAAc,EAAE,WAAW,CAAC,EAC3DD,cAAc,CACf;EACD,OAAOG,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMC,aAAmC,GAAG,CAAC;EAClDP,MAAM;EACNQ,IAAI;EACJC;AACF,CAAC,KAAK;EACJ,MAAM;MAAEC,MAAM,GAAG,CAAC;IAAiB,CAAC,GAAGV,MAAM;IAArBW,UAAU,4BAAKX,MAAM;EAE7C,MAAMY,gBAAgB,GAAG,CAACC,CAAiB,GAAG,EAAE,KAAK;IACnD,MAAMC,WAAW,GAAGL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,QAAQ,CAACC,GAAG,CAAC,CAAC;MAAEC;IAAK,CAAC,EAAEf,CAAC,KAAK;MACxD,MAAMgB,sBAAsB,GAAGnB,sBAAsB,CAACC,MAAM,EAAEiB,IAAI,EAAEf,CAAC,CAAC;MACtE,aACE,CAAAW,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAGX,CAAC,CAAC,KAAI,CAAC,CAAC;QADR;UAAEiB,kBAAkB,GAAGD;QAAsC,CAAC;QAAZE,UAAU;MAElE;QAASD;MAAkB,GAAKC,UAAU;IAC5C,CAAC,EAAE,EAAE,CAAC;IACN,OAAON,WAAW;EACpB,CAAC;EAED,MAAMO,gBAAgB,GAAG,CAACR,CAAgC,GAAG,CAAC,CAAC,KAAK;IAClE,MAAMS,WAAW,GAAGb,MAAM,CAACM,QAAQ,CAACQ,MAAM,CACxC,CAACC,YAAY,EAAE;MAAEP;IAAK,CAAC,EAAEf,CAAC,KAAK;MAC7B,MAAMgB,sBAAsB,GAAGnB,sBAAsB,CAACC,MAAM,EAAEiB,IAAI,EAAEf,CAAC,CAAC;MACtE,cACE,CAAAW,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAGI,IAAI,CAAC,KAAI,CAAC,CAAC;QADX;UAAEE,kBAAkB,GAAGD;QAAsC,CAAC;QAAZE,UAAU;MAElE,uCACKI,YAAY;QACf,CAACP,IAAI;UAAKE;QAAkB,GAAKC,UAAU;MAAE;IAEjD,CAAC,EAED,CAAC,CAAC,CACH;IACD,OAAOE,WAAW;EACpB,CAAC;EAED,OAAO;IACLtB,MAAM;MACJU,MAAM,EAAEe,KAAK,CAACC,OAAO,CAAChB,MAAM,CAAC,GACzBE,gBAAgB,CAACF,MAAM,CAAC,GACxBW,gBAAgB,CAACX,MAAM;IAAC,GACzBC,UAAU,CACd;IACDH,IAAI;IACJC;EACF,CAAC;AACH,CAAC"}