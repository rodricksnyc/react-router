{"version":3,"file":"seriesCellVis.spec.js","names":["mockTableConfig","mockFields","mockSdkDataResponse","seriesCellVis","describe","test","series","cell_visualization","color","visible","transformedConfig","config","data","fields","expect","toEqual","label","series_cell_visualizations","is_active"],"sources":["../../../src/configTransformations/seriesCellVis.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CTableSeries } from '..'\nimport { mockTableConfig, mockFields, mockSdkDataResponse } from '../fixtures'\nimport { seriesCellVis } from './seriesCellVis'\n\ndescribe('seriesCellVis', () => {\n  test('series as array', () => {\n    const series: CTableSeries[] = [\n      { cell_visualization: true, color: 'blue' },\n      { cell_visualization: false, visible: false },\n    ]\n\n    const transformedConfig = seriesCellVis({\n      config: { ...mockTableConfig, series },\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n\n    expect(transformedConfig.config.series).toEqual(series)\n  })\n\n  test('series as object', () => {\n    const series: { [k: string]: CTableSeries } = {\n      'orders.count': { color: 'blue', visible: true },\n      'orders.average_total_amount_of_order_usd': {\n        color: 'red',\n        label: 'Average',\n        visible: false,\n      },\n    }\n    const series_cell_visualizations = {\n      'orders.count': {\n        is_active: true,\n      },\n      'orders.average_total_amount_of_order_usd': {\n        is_active: false,\n      },\n    }\n\n    const transformedConfig = seriesCellVis({\n      config: { ...mockTableConfig, series, series_cell_visualizations },\n      data: mockSdkDataResponse,\n      fields: mockFields,\n    })\n\n    expect(transformedConfig.config.series).toEqual({\n      'orders.count': {\n        cell_visualization: true,\n        ...series['orders.count'],\n      },\n      'orders.average_total_amount_of_order_usd': {\n        cell_visualization: false,\n        ...series['orders.average_total_amount_of_order_usd'],\n      },\n    })\n  })\n})\n"],"mappings":";;;;AAMA,SAASA,eAAe,EAAEC,UAAU,EAAEC,mBAAmB,QAAQ,aAAa;AAC9E,SAASC,aAAa,QAAQ,iBAAiB;AAE/CC,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,IAAI,CAAC,iBAAiB,EAAE,MAAM;IAC5B,MAAMC,MAAsB,GAAG,CAC7B;MAAEC,kBAAkB,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC3C;MAAED,kBAAkB,EAAE,KAAK;MAAEE,OAAO,EAAE;IAAM,CAAC,CAC9C;IAED,MAAMC,iBAAiB,GAAGP,aAAa,CAAC;MACtCQ,MAAM,kCAAOX,eAAe;QAAEM;MAAM,EAAE;MACtCM,IAAI,EAAEV,mBAAmB;MACzBW,MAAM,EAAEZ;IACV,CAAC,CAAC;IAEFa,MAAM,CAACJ,iBAAiB,CAACC,MAAM,CAACL,MAAM,CAAC,CAACS,OAAO,CAACT,MAAM,CAAC;EACzD,CAAC,CAAC;EAEFD,IAAI,CAAC,kBAAkB,EAAE,MAAM;IAC7B,MAAMC,MAAqC,GAAG;MAC5C,cAAc,EAAE;QAAEE,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAK,CAAC;MAChD,0CAA0C,EAAE;QAC1CD,KAAK,EAAE,KAAK;QACZQ,KAAK,EAAE,SAAS;QAChBP,OAAO,EAAE;MACX;IACF,CAAC;IACD,MAAMQ,0BAA0B,GAAG;MACjC,cAAc,EAAE;QACdC,SAAS,EAAE;MACb,CAAC;MACD,0CAA0C,EAAE;QAC1CA,SAAS,EAAE;MACb;IACF,CAAC;IAED,MAAMR,iBAAiB,GAAGP,aAAa,CAAC;MACtCQ,MAAM,kCAAOX,eAAe;QAAEM,MAAM;QAAEW;MAA0B,EAAE;MAClEL,IAAI,EAAEV,mBAAmB;MACzBW,MAAM,EAAEZ;IACV,CAAC,CAAC;IAEFa,MAAM,CAACJ,iBAAiB,CAACC,MAAM,CAACL,MAAM,CAAC,CAACS,OAAO,CAAC;MAC9C,cAAc;QACZR,kBAAkB,EAAE;MAAI,GACrBD,MAAM,CAAC,cAAc,CAAC,CAC1B;MACD,0CAA0C;QACxCC,kBAAkB,EAAE;MAAK,GACtBD,MAAM,CAAC,0CAA0C,CAAC;IAEzD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}