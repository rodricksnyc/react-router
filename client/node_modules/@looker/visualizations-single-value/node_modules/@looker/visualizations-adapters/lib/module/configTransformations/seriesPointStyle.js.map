{"version":3,"file":"seriesPointStyle.js","names":["get","set","getMeasureNames","seriesPointStyle","config","data","fields","type","point_style","_point_style","series","restConfig","POINT_STYLE","circle","circle_outline","filled","outline","none","normalizedPointStyle","measures","buildArraySeries","s","arraySeries","i","length","style","buildNamedSeries","namedSeries","field","Array","isArray"],"sources":["../../../src/configTransformations/seriesPointStyle.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport get from 'lodash/get'\nimport set from 'lodash/set'\nimport type { CArea, CLine, CLineSeries } from '../adapters'\nimport type { ConfigHelper, RawApiConfigResponse } from '../types'\nimport { getMeasureNames } from '../utils'\n\n/**\n * Populate point style from raw api response.\n * Multiple point styles are not supported by the api. Sets all series\n * to match point_style when it's not othrewise set. Works for both array and\n * named series objects.\n */\nexport const seriesPointStyle: ConfigHelper<CLine | CArea> = ({\n  config,\n  data,\n  fields,\n}) => {\n  const { type, point_style: _point_style, series = {}, ...restConfig } = config\n\n  type PointStyleValues = CLineSeries['style']\n  type AllKeys = RawApiConfigResponse['point_style'] & PointStyleValues & ''\n\n  const POINT_STYLE: Record<AllKeys, PointStyleValues> = {\n    '': 'filled',\n    circle: 'filled',\n    circle_outline: 'outline',\n    filled: 'filled',\n    outline: 'outline',\n    // scatter plots can't have point style set to \"none\"\n    ...(type !== 'scatter' ? { none: 'none' } : { none: 'filled' }),\n  }\n\n  const normalizedPointStyle =\n    POINT_STYLE[(config.point_style || '') as AllKeys]\n\n  const measures = getMeasureNames(fields)\n\n  const buildArraySeries = (s: CLineSeries[] = []) => {\n    const arraySeries = [...s]\n    for (let i = 0; i < measures.length; i++) {\n      const { style = normalizedPointStyle } = arraySeries[i] || {}\n      set(arraySeries, [i, 'style'], style)\n    }\n    return arraySeries\n  }\n\n  const buildNamedSeries = (s: { [k: string]: CLineSeries }) => {\n    const namedSeries = { ...s }\n    for (const field of measures) {\n      const style = get(namedSeries, [field, 'style'], normalizedPointStyle)\n      set(namedSeries, [field, 'style'], style)\n    }\n    return namedSeries\n  }\n\n  return {\n    config: {\n      series: Array.isArray(series)\n        ? buildArraySeries(series)\n        : buildNamedSeries(series),\n      type,\n      ...restConfig,\n    },\n    data,\n    fields,\n  }\n}\n"],"mappings":";;;;;;AAKA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,GAAG,MAAM,YAAY;AAG5B,SAASC,eAAe,QAAQ,UAAU;;AAQ1C,OAAO,MAAMC,gBAA6C,GAAG,CAAC;EAC5DC,MAAM;EACNC,IAAI;EACJC;AACF,CAAC,KAAK;EACJ,MAAM;MAAEC,IAAI;MAAEC,WAAW,EAAEC,YAAY;MAAEC,MAAM,GAAG,CAAC;IAAiB,CAAC,GAAGN,MAAM;IAArBO,UAAU,4BAAKP,MAAM;EAK9E,MAAMQ,WAA8C;IAClD,EAAE,EAAE,QAAQ;IACZC,MAAM,EAAE,QAAQ;IAChBC,cAAc,EAAE,SAAS;IACzBC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;EAAS,GAEdT,IAAI,KAAK,SAAS,GAAG;IAAEU,IAAI,EAAE;EAAO,CAAC,GAAG;IAAEA,IAAI,EAAE;EAAS,CAAC,CAC/D;EAED,MAAMC,oBAAoB,GACxBN,WAAW,CAAER,MAAM,CAACI,WAAW,IAAI,EAAE,CAAa;EAEpD,MAAMW,QAAQ,GAAGjB,eAAe,CAACI,MAAM,CAAC;EAExC,MAAMc,gBAAgB,GAAG,CAACC,CAAgB,GAAG,EAAE,KAAK;IAClD,MAAMC,WAAW,GAAG,CAAC,GAAGD,CAAC,CAAC;IAC1B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,MAAM;QAAEE,KAAK,GAAGP;MAAqB,CAAC,GAAGI,WAAW,CAACC,CAAC,CAAC,IAAI,CAAC,CAAC;MAC7DtB,GAAG,CAACqB,WAAW,EAAE,CAACC,CAAC,EAAE,OAAO,CAAC,EAAEE,KAAK,CAAC;IACvC;IACA,OAAOH,WAAW;EACpB,CAAC;EAED,MAAMI,gBAAgB,GAAIL,CAA+B,IAAK;IAC5D,MAAMM,WAAW,qBAAQN,CAAC,CAAE;IAC5B,KAAK,MAAMO,KAAK,IAAIT,QAAQ,EAAE;MAC5B,MAAMM,KAAK,GAAGzB,GAAG,CAAC2B,WAAW,EAAE,CAACC,KAAK,EAAE,OAAO,CAAC,EAAEV,oBAAoB,CAAC;MACtEjB,GAAG,CAAC0B,WAAW,EAAE,CAACC,KAAK,EAAE,OAAO,CAAC,EAAEH,KAAK,CAAC;IAC3C;IACA,OAAOE,WAAW;EACpB,CAAC;EAED,OAAO;IACLvB,MAAM;MACJM,MAAM,EAAEmB,KAAK,CAACC,OAAO,CAACpB,MAAM,CAAC,GACzBU,gBAAgB,CAACV,MAAM,CAAC,GACxBgB,gBAAgB,CAAChB,MAAM,CAAC;MAC5BH;IAAI,GACDI,UAAU,CACd;IACDN,IAAI;IACJC;EACF,CAAC;AACH,CAAC"}