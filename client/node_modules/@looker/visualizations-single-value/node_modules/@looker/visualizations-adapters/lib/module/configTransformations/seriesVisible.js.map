{"version":3,"file":"seriesVisible.js","names":["set","getMeasureNames","seriesVisible","config","data","fields","type","hidden_fields","series","plot_size_by_field","size_by_field","restConfig","measures","buildArraySeries","s","arraySeries","i","length","visible","currentVisibility","buildNamedSeries","namedSeries","field","defaultVisibility","includes","Array","isArray"],"sources":["../../../src/configTransformations/seriesVisible.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport set from 'lodash/set'\nimport type {\n  ConfigHelper,\n  CSeriesBasic,\n  CommonCartesianProperties,\n} from '../types'\nimport { getMeasureNames } from '../utils'\n\n/**\n * Populate series visibility from hidden_series response.\n * Only merges api visibility values for named series.\n * Array series fills default visibility:true when not otherwise set.\n */\nexport const seriesVisible: ConfigHelper<CommonCartesianProperties> = ({\n  config,\n  data,\n  fields,\n}) => {\n  const {\n    type,\n    hidden_fields = [],\n    series = {},\n    plot_size_by_field,\n    size_by_field,\n    ...restConfig\n  } = config\n  const measures = getMeasureNames(fields)\n\n  const buildArraySeries = (s: CSeriesBasic[] = []) => {\n    const arraySeries = [...s]\n    for (let i = 0; i < measures.length; i++) {\n      const { visible: currentVisibility = true } = arraySeries[i] || {}\n      set(arraySeries, [i, 'visible'], currentVisibility)\n    }\n    return arraySeries\n  }\n\n  const buildNamedSeries = (s: { [k: string]: CSeriesBasic }) => {\n    const namedSeries = { ...s }\n    for (const field of measures) {\n      // For scatter charts, series used by the size_by behavior are hidden by default\n      const defaultVisibility = !(\n        (type === 'scatter' &&\n          size_by_field === field &&\n          !plot_size_by_field &&\n          fields.measures.length > 1) ||\n        hidden_fields.includes(field)\n      )\n\n      const { visible } = namedSeries[field]\n      set(\n        namedSeries,\n        [field, 'visible'],\n        typeof visible === 'boolean' ? visible : defaultVisibility\n      )\n    }\n    return namedSeries\n  }\n\n  return {\n    config: {\n      series: Array.isArray(series)\n        ? buildArraySeries(series)\n        : buildNamedSeries(series),\n      plot_size_by_field,\n      size_by_field,\n      type,\n      ...restConfig,\n    },\n    data,\n    fields,\n  }\n}\n"],"mappings":";;;;;;AAKA,OAAOA,GAAG,MAAM,YAAY;AAM5B,SAASC,eAAe,QAAQ,UAAU;;AAO1C,OAAO,MAAMC,aAAsD,GAAG,CAAC;EACrEC,MAAM;EACNC,IAAI;EACJC;AACF,CAAC,KAAK;EACJ,MAAM;MACJC,IAAI;MACJC,aAAa,GAAG,EAAE;MAClBC,MAAM,GAAG,CAAC,CAAC;MACXC,kBAAkB;MAClBC;IAEF,CAAC,GAAGP,MAAM;IADLQ,UAAU,4BACXR,MAAM;EACV,MAAMS,QAAQ,GAAGX,eAAe,CAACI,MAAM,CAAC;EAExC,MAAMQ,gBAAgB,GAAG,CAACC,CAAiB,GAAG,EAAE,KAAK;IACnD,MAAMC,WAAW,GAAG,CAAC,GAAGD,CAAC,CAAC;IAC1B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,MAAM;QAAEE,OAAO,EAAEC,iBAAiB,GAAG;MAAK,CAAC,GAAGJ,WAAW,CAACC,CAAC,CAAC,IAAI,CAAC,CAAC;MAClEhB,GAAG,CAACe,WAAW,EAAE,CAACC,CAAC,EAAE,SAAS,CAAC,EAAEG,iBAAiB,CAAC;IACrD;IACA,OAAOJ,WAAW;EACpB,CAAC;EAED,MAAMK,gBAAgB,GAAIN,CAAgC,IAAK;IAC7D,MAAMO,WAAW,qBAAQP,CAAC,CAAE;IAC5B,KAAK,MAAMQ,KAAK,IAAIV,QAAQ,EAAE;MAE5B,MAAMW,iBAAiB,GAAG,EACvBjB,IAAI,KAAK,SAAS,IACjBI,aAAa,KAAKY,KAAK,IACvB,CAACb,kBAAkB,IACnBJ,MAAM,CAACO,QAAQ,CAACK,MAAM,GAAG,CAAC,IAC5BV,aAAa,CAACiB,QAAQ,CAACF,KAAK,CAAC,CAC9B;MAED,MAAM;QAAEJ;MAAQ,CAAC,GAAGG,WAAW,CAACC,KAAK,CAAC;MACtCtB,GAAG,CACDqB,WAAW,EACX,CAACC,KAAK,EAAE,SAAS,CAAC,EAClB,OAAOJ,OAAO,KAAK,SAAS,GAAGA,OAAO,GAAGK,iBAAiB,CAC3D;IACH;IACA,OAAOF,WAAW;EACpB,CAAC;EAED,OAAO;IACLlB,MAAM;MACJK,MAAM,EAAEiB,KAAK,CAACC,OAAO,CAAClB,MAAM,CAAC,GACzBK,gBAAgB,CAACL,MAAM,CAAC,GACxBY,gBAAgB,CAACZ,MAAM,CAAC;MAC5BC,kBAAkB;MAClBC,aAAa;MACbJ;IAAI,GACDK,UAAU,CACd;IACDP,IAAI;IACJC;EACF,CAAC;AACH,CAAC"}