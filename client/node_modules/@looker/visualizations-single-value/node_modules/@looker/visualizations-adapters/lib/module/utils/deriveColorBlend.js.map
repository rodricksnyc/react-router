{"version":3,"file":"deriveColorBlend.js","names":["hsv","DEFAULT_SERIES_COLORS","fallbackVal","v1","v2","isNaN","deriveColorBlend","baseColor","targetColor","steps","colorStops","Math","max","baseHSV","targetHSV","baseHue","h","targetHue","baseSat","s","targetSat","v","baseVal","targetVal","hPerStep","sPerStep","vPerStep","Array","fill","map","_","i","hex"],"sources":["../../../src/utils/deriveColorBlend.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { hsv } from 'd3-hsv'\nimport { DEFAULT_SERIES_COLORS } from '.'\n\n/**\n * Utility for selecting base value, fallback value, or default value.\n * @param v1 base value\n * @param v2 fallback value\n * @returns\n *    v1 when base value is a valid number\n *    v2 when base value is NaN and fallback value is a valid number\n *    defaults to 0 when base and fallback values are NaN\n */\nconst fallbackVal = (v1: number, v2: number): number => {\n  if (isNaN(v1)) {\n    return fallbackVal(v2, 0)\n  }\n\n  return v1\n}\n\n/**\n * Utility mixes to colors together in a provided amount of steps\n * @param baseColor initial color (hex code)\n * @param targetColor color (hex code) to blend with baseColor\n * @param steps how many color stops to blend from base to target color\n * @returns an array of hex codes\n */\nexport const deriveColorBlend = (\n  baseColor: string = DEFAULT_SERIES_COLORS[0],\n  targetColor: string = DEFAULT_SERIES_COLORS[1],\n  steps = 5\n) => {\n  const colorStops = Math.max(steps - 1, 1) // use Math.max to prevent division by 0 errors\n\n  const baseHSV = hsv(baseColor)\n  const targetHSV = hsv(targetColor)\n\n  const baseHue = fallbackVal(baseHSV.h, targetHSV.h)\n  const targetHue = fallbackVal(targetHSV.h, baseHSV.h)\n\n  const baseSat = fallbackVal(baseHSV.s, targetHSV.s)\n  const targetSat = fallbackVal(targetHSV.s, baseHSV.s)\n\n  const { v: baseVal } = baseHSV\n  const { v: targetVal } = targetHSV\n\n  const hPerStep = (targetHue - baseHue) / colorStops\n  const sPerStep = (targetSat - baseSat) / colorStops\n  const vPerStep = (targetVal - baseVal) / colorStops\n\n  return new Array(steps).fill('').map((_, i) => {\n    return hsv(\n      baseHue + hPerStep * i,\n      baseSat + sPerStep * i,\n      baseVal + vPerStep * i\n    ).hex()\n  })\n}\n"],"mappings":";AAIA,SAASA,GAAG,QAAQ,QAAQ;AAC5B,SAASC,qBAAqB,QAAQ,GAAG;;AAWzC,MAAMC,WAAW,GAAG,CAACC,EAAU,EAAEC,EAAU,KAAa;EACtD,IAAIC,KAAK,CAACF,EAAE,CAAC,EAAE;IACb,OAAOD,WAAW,CAACE,EAAE,EAAE,CAAC,CAAC;EAC3B;EAEA,OAAOD,EAAE;AACX,CAAC;;AASD,OAAO,MAAMG,gBAAgB,GAAG,CAC9BC,SAAiB,GAAGN,qBAAqB,CAAC,CAAC,CAAC,EAC5CO,WAAmB,GAAGP,qBAAqB,CAAC,CAAC,CAAC,EAC9CQ,KAAK,GAAG,CAAC,KACN;EACH,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;;EAEzC,MAAMI,OAAO,GAAGb,GAAG,CAACO,SAAS,CAAC;EAC9B,MAAMO,SAAS,GAAGd,GAAG,CAACQ,WAAW,CAAC;EAElC,MAAMO,OAAO,GAAGb,WAAW,CAACW,OAAO,CAACG,CAAC,EAAEF,SAAS,CAACE,CAAC,CAAC;EACnD,MAAMC,SAAS,GAAGf,WAAW,CAACY,SAAS,CAACE,CAAC,EAAEH,OAAO,CAACG,CAAC,CAAC;EAErD,MAAME,OAAO,GAAGhB,WAAW,CAACW,OAAO,CAACM,CAAC,EAAEL,SAAS,CAACK,CAAC,CAAC;EACnD,MAAMC,SAAS,GAAGlB,WAAW,CAACY,SAAS,CAACK,CAAC,EAAEN,OAAO,CAACM,CAAC,CAAC;EAErD,MAAM;IAAEE,CAAC,EAAEC;EAAQ,CAAC,GAAGT,OAAO;EAC9B,MAAM;IAAEQ,CAAC,EAAEE;EAAU,CAAC,GAAGT,SAAS;EAElC,MAAMU,QAAQ,GAAG,CAACP,SAAS,GAAGF,OAAO,IAAIL,UAAU;EACnD,MAAMe,QAAQ,GAAG,CAACL,SAAS,GAAGF,OAAO,IAAIR,UAAU;EACnD,MAAMgB,QAAQ,GAAG,CAACH,SAAS,GAAGD,OAAO,IAAIZ,UAAU;EAEnD,OAAO,IAAIiB,KAAK,CAAClB,KAAK,CAAC,CAACmB,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC7C,OAAO/B,GAAG,CACRe,OAAO,GAAGS,QAAQ,GAAGO,CAAC,EACtBb,OAAO,GAAGO,QAAQ,GAAGM,CAAC,EACtBT,OAAO,GAAGI,QAAQ,GAAGK,CAAC,CACvB,CAACC,GAAG,EAAE;EACT,CAAC,CAAC;AACJ,CAAC"}