{"version":3,"file":"formatTotals.js","names":["buildPivotMeasureName","has","isTotalsValue","obj","formatTotals","totals","entries","Object","forEach","key","value","innerKey","innerObj","measureName","pivotValue"],"sources":["../../../src/utils/formatTotals.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Totals, TotalsValue, ValueOf } from '../types'\nimport { buildPivotMeasureName } from './buildPivotMeasureName'\nimport has from 'lodash/has'\n\nconst isTotalsValue = (obj: ValueOf<Totals>): obj is TotalsValue => {\n  return has(obj, 'value')\n}\n\nexport const formatTotals = (totals: Totals = {}) => {\n  const entries: Record<string, ValueOf<TotalsValue>> = {}\n  Object.entries(totals).forEach(([key, obj]) => {\n    if (isTotalsValue(obj)) {\n      entries[key] = obj.value\n    } else {\n      Object.entries(obj).forEach(([innerKey, innerObj]) => {\n        const measureName = buildPivotMeasureName({\n          measureName: key,\n          pivotValue: innerKey,\n        })\n        entries[measureName] = innerObj.value\n      })\n    }\n  })\n\n  return entries\n}\n"],"mappings":";;AAMA,SAASA,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAOC,GAAG,MAAM,YAAY;AAE5B,MAAMC,aAAa,GAAIC,GAAoB,IAAyB;EAClE,OAAOF,GAAG,CAACE,GAAG,EAAE,OAAO,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,CAACC,MAAc,GAAG,CAAC,CAAC,KAAK;EACnD,MAAMC,OAA6C,GAAG,CAAC,CAAC;EACxDC,MAAM,CAACD,OAAO,CAACD,MAAM,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEN,GAAG,CAAC,KAAK;IAC7C,IAAID,aAAa,CAACC,GAAG,CAAC,EAAE;MACtBG,OAAO,CAACG,GAAG,CAAC,GAAGN,GAAG,CAACO,KAAK;IAC1B,CAAC,MAAM;MACLH,MAAM,CAACD,OAAO,CAACH,GAAG,CAAC,CAACK,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAEC,QAAQ,CAAC,KAAK;QACpD,MAAMC,WAAW,GAAGb,qBAAqB,CAAC;UACxCa,WAAW,EAAEJ,GAAG;UAChBK,UAAU,EAAEH;QACd,CAAC,CAAC;QACFL,OAAO,CAACO,WAAW,CAAC,GAAGD,QAAQ,CAACF,KAAK;MACvC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC"}