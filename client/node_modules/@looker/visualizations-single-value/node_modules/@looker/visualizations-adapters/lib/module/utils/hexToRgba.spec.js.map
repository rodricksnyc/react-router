{"version":3,"file":"hexToRgba.spec.js","names":["hexToRgba","describe","test","expect","toEqual","toThrow"],"sources":["../../../src/utils/hexToRgba.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { hexToRgba } from './hexToRgba'\n\ndescribe('hexToRgba', () => {\n  test('converts hex code to rgba equivalent', () => {\n    expect(hexToRgba('#ffffff', 1)).toEqual('rgba(255, 255, 255, 1)')\n    expect(hexToRgba('#000000', 0.1)).toEqual('rgba(0, 0, 0, 0.1)')\n  })\n  test('handles 3-digit hex colors without the preceeding # symbol', () => {\n    expect(hexToRgba('fff', 0.5)).toEqual('rgba(255, 255, 255, 0.5)')\n  })\n  test('throws error when invalid arguments are supplied', () => {\n    expect(() => {\n      hexToRgba('not-a-hex-code', 1)\n    }).toThrow()\n    expect(() => {\n      hexToRgba('FFFFFF', 1000)\n    }).toThrow()\n  })\n})\n"],"mappings":";AAIA,SAASA,SAAS,QAAQ,aAAa;AAEvCC,QAAQ,CAAC,WAAW,EAAE,MAAM;EAC1BC,IAAI,CAAC,sCAAsC,EAAE,MAAM;IACjDC,MAAM,CAACH,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,wBAAwB,CAAC;IACjED,MAAM,CAACH,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAACI,OAAO,CAAC,oBAAoB,CAAC;EACjE,CAAC,CAAC;EACFF,IAAI,CAAC,4DAA4D,EAAE,MAAM;IACvEC,MAAM,CAACH,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAACI,OAAO,CAAC,0BAA0B,CAAC;EACnE,CAAC,CAAC;EACFF,IAAI,CAAC,kDAAkD,EAAE,MAAM;IAC7DC,MAAM,CAAC,MAAM;MACXH,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAChC,CAAC,CAAC,CAACK,OAAO,EAAE;IACZF,MAAM,CAAC,MAAM;MACXH,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;IAC3B,CAAC,CAAC,CAACK,OAAO,EAAE;EACd,CAAC,CAAC;AACJ,CAAC,CAAC"}