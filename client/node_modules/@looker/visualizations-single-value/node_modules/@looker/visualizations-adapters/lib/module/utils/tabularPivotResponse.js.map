{"version":3,"file":"tabularPivotResponse.js","names":["buildPivotMeasureName","getDimensionNames","getMeasureNames","tabularPivotResponse","data","fields","pivots","map","datum","formattedDatum","dimensionNames","forEach","dimensionName","value","measureNames","measureName","pivotValues","pivot","key","pivotValue"],"sources":["../../../src/utils/tabularPivotResponse.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { buildPivotMeasureName, getDimensionNames, getMeasureNames } from '.'\nimport type { Fields, Pivots, SDKRecord } from '../types'\n\n/**\n * Flattens a pivot query data response from the Looker API into an array of\n * 1-layer, tabularized data objects.\n *\n * Context: Measures look different in pivot queries where their values aren't\n * 1-level deep objects with \"value\" properties. Instead, they're objects\n * with keys reflective of a the pivot fields' values. We need to use the\n * pivots metadata from the query response to determine what those keys are\n * and then transform the values.\n */\nexport const tabularPivotResponse = ({\n  data,\n  fields,\n  pivots,\n}: {\n  data: SDKRecord[]\n  fields: Fields\n  pivots: Pivots\n}) =>\n  data.map((datum) => {\n    const formattedDatum: SDKRecord = {}\n\n    const dimensionNames = getDimensionNames(fields)\n\n    dimensionNames.forEach(\n      (dimensionName) =>\n        (formattedDatum[dimensionName] =\n          datum[dimensionName] && datum[dimensionName].value)\n    )\n\n    const measureNames = getMeasureNames(fields)\n    measureNames.forEach((measureName) => {\n      const pivotValues = pivots.map((pivot) => pivot.key)\n      pivotValues.forEach((pivotValue) => {\n        formattedDatum[buildPivotMeasureName({ measureName, pivotValue })] =\n          datum[measureName] && datum[measureName][pivotValue].value\n      })\n    })\n\n    return formattedDatum\n  })\n"],"mappings":";AAIA,SAASA,qBAAqB,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,GAAG;AAa7E,OAAO,MAAMC,oBAAoB,GAAG,CAAC;EACnCC,IAAI;EACJC,MAAM;EACNC;AAKF,CAAC,KACCF,IAAI,CAACG,GAAG,CAAEC,KAAK,IAAK;EAClB,MAAMC,cAAyB,GAAG,CAAC,CAAC;EAEpC,MAAMC,cAAc,GAAGT,iBAAiB,CAACI,MAAM,CAAC;EAEhDK,cAAc,CAACC,OAAO,CACnBC,aAAa,IACXH,cAAc,CAACG,aAAa,CAAC,GAC5BJ,KAAK,CAACI,aAAa,CAAC,IAAIJ,KAAK,CAACI,aAAa,CAAC,CAACC,KAAM,CACxD;EAED,MAAMC,YAAY,GAAGZ,eAAe,CAACG,MAAM,CAAC;EAC5CS,YAAY,CAACH,OAAO,CAAEI,WAAW,IAAK;IACpC,MAAMC,WAAW,GAAGV,MAAM,CAACC,GAAG,CAAEU,KAAK,IAAKA,KAAK,CAACC,GAAG,CAAC;IACpDF,WAAW,CAACL,OAAO,CAAEQ,UAAU,IAAK;MAClCV,cAAc,CAACT,qBAAqB,CAAC;QAAEe,WAAW;QAAEI;MAAW,CAAC,CAAC,CAAC,GAChEX,KAAK,CAACO,WAAW,CAAC,IAAIP,KAAK,CAACO,WAAW,CAAC,CAACI,UAAU,CAAC,CAACN,KAAK;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOJ,cAAc;AACvB,CAAC,CAAC"}